{"ast":null,"code":"/**\n * @module Link/helper\n * @description\n * A set of helper methods to manipulate/create links.\n */\nimport { LINE_TYPES } from \"./link.const\";\n/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */\n\nfunction straightLineRadius() {\n  return 0;\n}\n/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */\n\n\nfunction smoothCurveRadius(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */\n\n\nfunction fullCurveRadius() {\n  return 1;\n}\n\nconst RADIUS_STRATEGIES = {\n  [LINE_TYPES.STRAIGHT]: straightLineRadius,\n  [LINE_TYPES.CURVE_SMOOTH]: smoothCurveRadius,\n  [LINE_TYPES.CURVE_FULL]: fullCurveRadius\n};\n/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */\n\nfunction getRadiusStrategy(type) {\n  return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[LINE_TYPES.STRAIGHT];\n}\n/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */\n\n\nfunction buildLinkPathDefinition({\n  source = {},\n  target = {}\n}, type = LINE_TYPES.STRAIGHT) {\n  const {\n    x: sx,\n    y: sy\n  } = source;\n  const {\n    x: tx,\n    y: ty\n  } = target;\n  const validType = LINE_TYPES[type] || LINE_TYPES.STRAIGHT;\n  const radius = getRadiusStrategy(validType)(sx, sy, tx, ty);\n  return `M${sx},${sy}A${radius},${radius} 0 0,1 ${tx},${ty}`;\n}\n\nexport { buildLinkPathDefinition };","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/Graph/link/link.helper.js"],"names":["LINE_TYPES","straightLineRadius","smoothCurveRadius","x1","y1","x2","y2","dx","dy","Math","sqrt","fullCurveRadius","RADIUS_STRATEGIES","STRAIGHT","CURVE_SMOOTH","CURVE_FULL","getRadiusStrategy","type","buildLinkPathDefinition","source","target","x","sx","y","sy","tx","ty","validType","radius"],"mappings":"AAAA;;;;;AAKA,SAASA,UAAT,QAA2B,cAA3B;AAEA;;;;;;AAKA,SAASC,kBAAT,GAA8B;AAC1B,SAAO,CAAP;AACH;AAED;;;;;;;;;;;AASA,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AACvC,QAAMC,EAAE,GAAGF,EAAE,GAAGF,EAAhB;AACA,QAAMK,EAAE,GAAGF,EAAE,GAAGF,EAAhB;AAEA,SAAOK,IAAI,CAACC,IAAL,CAAUH,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAP;AACH;AAED;;;;;;;AAKA,SAASG,eAAT,GAA2B;AACvB,SAAO,CAAP;AACH;;AAED,MAAMC,iBAAiB,GAAG;AACtB,GAACZ,UAAU,CAACa,QAAZ,GAAuBZ,kBADD;AAEtB,GAACD,UAAU,CAACc,YAAZ,GAA2BZ,iBAFL;AAGtB,GAACF,UAAU,CAACe,UAAZ,GAAyBJ;AAHH,CAA1B;AAMA;;;;;;;;;AAQA,SAASK,iBAAT,CAA2BC,IAA3B,EAAiC;AAC7B,SAAOL,iBAAiB,CAACK,IAAD,CAAjB,IAA2BL,iBAAiB,CAACZ,UAAU,CAACa,QAAZ,CAAnD;AACH;AAED;;;;;;;;;;;;;AAWA,SAASK,uBAAT,CAAiC;AAAEC,EAAAA,MAAM,GAAG,EAAX;AAAeC,EAAAA,MAAM,GAAG;AAAxB,CAAjC,EAA+DH,IAAI,GAAGjB,UAAU,CAACa,QAAjF,EAA2F;AACvF,QAAM;AAAEQ,IAAAA,CAAC,EAAEC,EAAL;AAASC,IAAAA,CAAC,EAAEC;AAAZ,MAAmBL,MAAzB;AACA,QAAM;AAAEE,IAAAA,CAAC,EAAEI,EAAL;AAASF,IAAAA,CAAC,EAAEG;AAAZ,MAAmBN,MAAzB;AACA,QAAMO,SAAS,GAAG3B,UAAU,CAACiB,IAAD,CAAV,IAAoBjB,UAAU,CAACa,QAAjD;AACA,QAAMe,MAAM,GAAGZ,iBAAiB,CAACW,SAAD,CAAjB,CAA6BL,EAA7B,EAAiCE,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,CAAf;AAEA,SAAQ,IAAGJ,EAAG,IAAGE,EAAG,IAAGI,MAAO,IAAGA,MAAO,UAASH,EAAG,IAAGC,EAAG,EAA1D;AACH;;AAED,SAASR,uBAAT","sourcesContent":["/**\n * @module Link/helper\n * @description\n * A set of helper methods to manipulate/create links.\n */\nimport { LINE_TYPES } from \"./link.const\";\n\n/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */\nfunction straightLineRadius() {\n    return 0;\n}\n\n/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */\nfunction smoothCurveRadius(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */\nfunction fullCurveRadius() {\n    return 1;\n}\n\nconst RADIUS_STRATEGIES = {\n    [LINE_TYPES.STRAIGHT]: straightLineRadius,\n    [LINE_TYPES.CURVE_SMOOTH]: smoothCurveRadius,\n    [LINE_TYPES.CURVE_FULL]: fullCurveRadius,\n};\n\n/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */\nfunction getRadiusStrategy(type) {\n    return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[LINE_TYPES.STRAIGHT];\n}\n\n/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */\nfunction buildLinkPathDefinition({ source = {}, target = {} }, type = LINE_TYPES.STRAIGHT) {\n    const { x: sx, y: sy } = source;\n    const { x: tx, y: ty } = target;\n    const validType = LINE_TYPES[type] || LINE_TYPES.STRAIGHT;\n    const radius = getRadiusStrategy(validType)(sx, sy, tx, ty);\n\n    return `M${sx},${sy}A${radius},${radius} 0 0,1 ${tx},${ty}`;\n}\n\nexport { buildLinkPathDefinition };\n"]},"metadata":{},"sourceType":"module"}