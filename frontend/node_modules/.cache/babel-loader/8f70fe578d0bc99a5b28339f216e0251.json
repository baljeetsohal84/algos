{"ast":null,"code":"/**\n * @module Graph/builder\n * @description\n * Offers a series of methods that isolate the way graph elements are built (nodes and links mainly).\n */\nimport CONST from \"./graph.const\";\nimport { buildLinkPathDefinition } from \"../link/link.helper\";\nimport { getMarkerId } from \"../marker/marker.helper\";\n/**\n * Get the correct node opacity in order to properly make decisions based on context such as currently highlighted node.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {number} the opacity value for the given node.\n * @memberof Graph/builder\n */\n\nfunction _getNodeOpacity(node, highlightedNode, highlightedLink, config) {\n  const highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target);\n  const someLinkHighlighted = highlightedLink && highlightedLink.source && highlightedLink.target;\n  const someNodeHighlighted = !!(highlightedNode || someLinkHighlighted);\n  let opacity;\n\n  if (someNodeHighlighted && config.highlightDegree === 0) {\n    opacity = highlight ? config.node.opacity : config.highlightOpacity;\n  } else if (someNodeHighlighted) {\n    opacity = highlight ? config.node.opacity : config.highlightOpacity;\n  } else {\n    opacity = node.opacity || config.node.opacity;\n  }\n\n  return opacity;\n}\n/**\n * Build some Link properties based on given parameters.\n * @param  {Object} link - the link object for which we will generate properties.\n * @param  {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param  {Object.<string, Object>} links - same as {@link #graphrenderer|links in renderGraph}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #graphrenderer|linkCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object that aggregates all props for creating respective Link component instance.\n * @memberof Graph/builder\n */\n\n\nfunction buildLinkProps(link, nodes, links, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n  var _nodes$source, _nodes$source2, _nodes$target, _nodes$target2;\n\n  const {\n    source,\n    target\n  } = link;\n  const x1 = (nodes === null || nodes === void 0 ? void 0 : (_nodes$source = nodes[source]) === null || _nodes$source === void 0 ? void 0 : _nodes$source.x) || 0;\n  const y1 = (nodes === null || nodes === void 0 ? void 0 : (_nodes$source2 = nodes[source]) === null || _nodes$source2 === void 0 ? void 0 : _nodes$source2.y) || 0;\n  const x2 = (nodes === null || nodes === void 0 ? void 0 : (_nodes$target = nodes[target]) === null || _nodes$target === void 0 ? void 0 : _nodes$target.x) || 0;\n  const y2 = (nodes === null || nodes === void 0 ? void 0 : (_nodes$target2 = nodes[target]) === null || _nodes$target2 === void 0 ? void 0 : _nodes$target2.y) || 0;\n  const type = link.type || config.link.type;\n  const d = buildLinkPathDefinition({\n    source: {\n      x: x1,\n      y: y1\n    },\n    target: {\n      x: x2,\n      y: y2\n    }\n  }, type);\n  let mainNodeParticipates = false;\n\n  switch (config.highlightDegree) {\n    case 0:\n      break;\n\n    case 2:\n      mainNodeParticipates = true;\n      break;\n\n    default:\n      // 1st degree is the fallback behavior\n      mainNodeParticipates = source === highlightedNode || target === highlightedNode;\n      break;\n  }\n\n  const guiltyNode = mainNodeParticipates && nodes[source].highlighted && nodes[target].highlighted;\n  const guiltyLink = source === (highlightedLink && highlightedLink.source) && target === (highlightedLink && highlightedLink.target);\n  const highlight = guiltyNode || guiltyLink;\n  let opacity = link.opacity || config.link.opacity;\n\n  if (highlightedNode || highlightedLink && highlightedLink.source) {\n    opacity = highlight ? config.link.opacity : config.highlightOpacity;\n  }\n\n  let stroke = link.color || config.link.color;\n\n  if (highlight) {\n    stroke = config.link.highlightColor === CONST.KEYWORDS.SAME ? config.link.color : config.link.highlightColor;\n  }\n\n  let strokeWidth = (link.strokeWidth || config.link.strokeWidth) * (1 / transform);\n\n  if (config.link.semanticStrokeWidth) {\n    const linkValue = links[source][target] || links[target][source] || 1;\n    strokeWidth += linkValue * strokeWidth / 10;\n  }\n\n  const markerId = config.directed ? getMarkerId(highlight, transform, config) : null;\n  const t = 1 / transform;\n  let fontSize = null,\n      fontColor = null,\n      fontWeight = null,\n      label = null;\n\n  if (config.link.renderLabel) {\n    if (typeof config.link.labelProperty === \"function\") {\n      label = config.link.labelProperty(link);\n    } else {\n      label = link[config.link.labelProperty];\n    }\n\n    fontSize = link.fontSize || config.link.fontSize;\n    fontColor = link.fontColor || config.link.fontColor;\n    fontWeight = highlight ? config.link.highlightFontWeight : config.link.fontWeight;\n  }\n\n  return {\n    className: CONST.LINK_CLASS_NAME,\n    d,\n    fontColor,\n    fontSize: fontSize * t,\n    fontWeight,\n    label,\n    markerId,\n    mouseCursor: config.link.mouseCursor,\n    opacity,\n    source,\n    stroke,\n    strokeWidth,\n    target,\n    onClickLink: linkCallbacks.onClickLink,\n    onMouseOutLink: linkCallbacks.onMouseOutLink,\n    onMouseOverLink: linkCallbacks.onMouseOverLink,\n    onRightClickLink: linkCallbacks.onRightClickLink\n  };\n}\n/**\n * Build some Node properties based on given parameters.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} nodeCallbacks - same as {@link #graphrenderer|nodeCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns object that contain Link props ready to be feeded to the Link component.\n * @memberof Graph/builder\n */\n\n\nfunction buildNodeProps(node, config, nodeCallbacks = {}, highlightedNode, highlightedLink, transform) {\n  const highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target);\n\n  const opacity = _getNodeOpacity(node, highlightedNode, highlightedLink, config);\n\n  let fill = node.color || config.node.color;\n\n  if (highlight && config.node.highlightColor !== CONST.KEYWORDS.SAME) {\n    fill = config.node.highlightColor;\n  }\n\n  let stroke = node.strokeColor || config.node.strokeColor;\n\n  if (highlight && config.node.highlightStrokeColor !== CONST.KEYWORDS.SAME) {\n    stroke = config.node.highlightStrokeColor;\n  }\n\n  let label = node[config.node.labelProperty] || node.id;\n\n  if (typeof config.node.labelProperty === \"function\") {\n    label = config.node.labelProperty(node);\n  }\n\n  let strokeWidth = node.strokeWidth || config.node.strokeWidth;\n\n  if (highlight && config.node.highlightStrokeWidth !== CONST.KEYWORDS.SAME) {\n    strokeWidth = config.node.highlightStrokeWidth;\n  }\n\n  const t = 1 / transform;\n  const nodeSize = node.size || config.node.size;\n  const fontSize = highlight ? config.node.highlightFontSize : config.node.fontSize;\n  const dx = fontSize * t + nodeSize / 100 + 1.5;\n  const svg = node.svg || config.node.svg;\n  const fontColor = node.fontColor || config.node.fontColor;\n  return { ...node,\n    className: CONST.NODE_CLASS_NAME,\n    cursor: config.node.mouseCursor,\n    // eslint-disable-next-line no-restricted-globals\n    cx: (node === null || node === void 0 ? void 0 : node.x) || screen.width / 2.5,\n    // eslint-disable-next-line no-restricted-globals\n    cy: (node === null || node === void 0 ? void 0 : node.y) || screen.height / 2.8,\n    dx,\n    fill,\n    fontColor,\n    fontSize: fontSize * t,\n    fontWeight: highlight ? config.node.highlightFontWeight : config.node.fontWeight,\n    id: node.id,\n    label,\n    opacity,\n    overrideGlobalViewGenerator: !node.viewGenerator && node.svg,\n    renderLabel: node.renderLabel || config.node.renderLabel,\n    size: nodeSize * t,\n    stroke,\n    strokeWidth: strokeWidth * t,\n    svg,\n    type: node.symbolType || config.node.symbolType,\n    viewGenerator: node.viewGenerator || config.node.viewGenerator,\n    onClickNode: nodeCallbacks.onClickNode,\n    onMouseOut: nodeCallbacks.onMouseOut,\n    onMouseOverNode: nodeCallbacks.onMouseOverNode,\n    onRightClickNode: nodeCallbacks.onRightClickNode\n  };\n}\n\nexport { buildLinkProps, buildNodeProps };","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/React-D3-Graph/Graph/graph/graph.builder.js"],"names":["CONST","buildLinkPathDefinition","getMarkerId","_getNodeOpacity","node","highlightedNode","highlightedLink","config","highlight","highlighted","id","source","target","someLinkHighlighted","someNodeHighlighted","opacity","highlightDegree","highlightOpacity","buildLinkProps","link","nodes","links","linkCallbacks","transform","x1","x","y1","y","x2","y2","type","d","mainNodeParticipates","guiltyNode","guiltyLink","stroke","color","highlightColor","KEYWORDS","SAME","strokeWidth","semanticStrokeWidth","linkValue","markerId","directed","t","fontSize","fontColor","fontWeight","label","renderLabel","labelProperty","highlightFontWeight","className","LINK_CLASS_NAME","mouseCursor","onClickLink","onMouseOutLink","onMouseOverLink","onRightClickLink","buildNodeProps","nodeCallbacks","fill","strokeColor","highlightStrokeColor","highlightStrokeWidth","nodeSize","size","highlightFontSize","dx","svg","NODE_CLASS_NAME","cursor","cx","screen","width","cy","height","overrideGlobalViewGenerator","viewGenerator","symbolType","onClickNode","onMouseOut","onMouseOverNode","onRightClickNode"],"mappings":"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","sourcesContent":["/**\n * @module Graph/builder\n * @description\n * Offers a series of methods that isolate the way graph elements are built (nodes and links mainly).\n */\nimport CONST from \"./graph.const\";\n\nimport { buildLinkPathDefinition } from \"../link/link.helper\";\nimport { getMarkerId } from \"../marker/marker.helper\";\n\n/**\n * Get the correct node opacity in order to properly make decisions based on context such as currently highlighted node.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {number} the opacity value for the given node.\n * @memberof Graph/builder\n */\nfunction _getNodeOpacity(node, highlightedNode, highlightedLink, config) {\n  const highlight =\n    node.highlighted ||\n    node.id === (highlightedLink && highlightedLink.source) ||\n    node.id === (highlightedLink && highlightedLink.target);\n  const someLinkHighlighted =\n    highlightedLink && highlightedLink.source && highlightedLink.target;\n  const someNodeHighlighted = !!(highlightedNode || someLinkHighlighted);\n\n  let opacity;\n\n  if (someNodeHighlighted && config.highlightDegree === 0) {\n    opacity = highlight ? config.node.opacity : config.highlightOpacity;\n  } else if (someNodeHighlighted) {\n    opacity = highlight ? config.node.opacity : config.highlightOpacity;\n  } else {\n    opacity = node.opacity || config.node.opacity;\n  }\n\n  return opacity;\n}\n\n/**\n * Build some Link properties based on given parameters.\n * @param  {Object} link - the link object for which we will generate properties.\n * @param  {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param  {Object.<string, Object>} links - same as {@link #graphrenderer|links in renderGraph}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #graphrenderer|linkCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object that aggregates all props for creating respective Link component instance.\n * @memberof Graph/builder\n */\nfunction buildLinkProps(\n  link,\n  nodes,\n  links,\n  config,\n  linkCallbacks,\n  highlightedNode,\n  highlightedLink,\n  transform\n) {\n  const { source, target } = link;\n  const x1 = nodes?.[source]?.x || 0;\n  const y1 = nodes?.[source]?.y || 0;\n  const x2 = nodes?.[target]?.x || 0;\n  const y2 = nodes?.[target]?.y || 0;\n  const type = link.type || config.link.type;\n  const d = buildLinkPathDefinition(\n    { source: { x: x1, y: y1 }, target: { x: x2, y: y2 } },\n    type\n  );\n\n  let mainNodeParticipates = false;\n\n  switch (config.highlightDegree) {\n    case 0:\n      break;\n    case 2:\n      mainNodeParticipates = true;\n      break;\n    default:\n      // 1st degree is the fallback behavior\n      mainNodeParticipates =\n        source === highlightedNode || target === highlightedNode;\n      break;\n  }\n\n  const guiltyNode =\n    mainNodeParticipates &&\n    nodes[source].highlighted &&\n    nodes[target].highlighted;\n  const guiltyLink =\n    source === (highlightedLink && highlightedLink.source) &&\n    target === (highlightedLink && highlightedLink.target);\n  const highlight = guiltyNode || guiltyLink;\n\n  let opacity = link.opacity || config.link.opacity;\n\n  if (highlightedNode || (highlightedLink && highlightedLink.source)) {\n    opacity = highlight ? config.link.opacity : config.highlightOpacity;\n  }\n\n  let stroke = link.color || config.link.color;\n\n  if (highlight) {\n    stroke =\n      config.link.highlightColor === CONST.KEYWORDS.SAME\n        ? config.link.color\n        : config.link.highlightColor;\n  }\n\n  let strokeWidth =\n    (link.strokeWidth || config.link.strokeWidth) * (1 / transform);\n\n  if (config.link.semanticStrokeWidth) {\n    const linkValue = links[source][target] || links[target][source] || 1;\n\n    strokeWidth += (linkValue * strokeWidth) / 10;\n  }\n\n  const markerId = config.directed\n    ? getMarkerId(highlight, transform, config)\n    : null;\n\n  const t = 1 / transform;\n\n  let fontSize = null,\n    fontColor = null,\n    fontWeight = null,\n    label = null;\n\n  if (config.link.renderLabel) {\n    if (typeof config.link.labelProperty === \"function\") {\n      label = config.link.labelProperty(link);\n    } else {\n      label = link[config.link.labelProperty];\n    }\n\n    fontSize = link.fontSize || config.link.fontSize;\n    fontColor = link.fontColor || config.link.fontColor;\n    fontWeight = highlight\n      ? config.link.highlightFontWeight\n      : config.link.fontWeight;\n  }\n\n  return {\n    className: CONST.LINK_CLASS_NAME,\n    d,\n    fontColor,\n    fontSize: fontSize * t,\n    fontWeight,\n    label,\n    markerId,\n    mouseCursor: config.link.mouseCursor,\n    opacity,\n    source,\n    stroke,\n    strokeWidth,\n    target,\n    onClickLink: linkCallbacks.onClickLink,\n    onMouseOutLink: linkCallbacks.onMouseOutLink,\n    onMouseOverLink: linkCallbacks.onMouseOverLink,\n    onRightClickLink: linkCallbacks.onRightClickLink\n  };\n}\n\n/**\n * Build some Node properties based on given parameters.\n * @param  {Object} node - the node object for whom we will generate properties.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} nodeCallbacks - same as {@link #graphrenderer|nodeCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns object that contain Link props ready to be feeded to the Link component.\n * @memberof Graph/builder\n */\nfunction buildNodeProps(\n  node,\n  config,\n  nodeCallbacks = {},\n  highlightedNode,\n  highlightedLink,\n  transform\n) {\n  const highlight =\n    node.highlighted ||\n    node.id === (highlightedLink && highlightedLink.source) ||\n    node.id === (highlightedLink && highlightedLink.target);\n  const opacity = _getNodeOpacity(\n    node,\n    highlightedNode,\n    highlightedLink,\n    config\n  );\n\n  let fill = node.color || config.node.color;\n\n  if (highlight && config.node.highlightColor !== CONST.KEYWORDS.SAME) {\n    fill = config.node.highlightColor;\n  }\n\n  let stroke = node.strokeColor || config.node.strokeColor;\n\n  if (highlight && config.node.highlightStrokeColor !== CONST.KEYWORDS.SAME) {\n    stroke = config.node.highlightStrokeColor;\n  }\n\n  let label = node[config.node.labelProperty] || node.id;\n\n  if (typeof config.node.labelProperty === \"function\") {\n    label = config.node.labelProperty(node);\n  }\n\n  let strokeWidth = node.strokeWidth || config.node.strokeWidth;\n\n  if (highlight && config.node.highlightStrokeWidth !== CONST.KEYWORDS.SAME) {\n    strokeWidth = config.node.highlightStrokeWidth;\n  }\n\n  const t = 1 / transform;\n  const nodeSize = node.size || config.node.size;\n  const fontSize = highlight\n    ? config.node.highlightFontSize\n    : config.node.fontSize;\n  const dx = fontSize * t + nodeSize / 100 + 1.5;\n  const svg = node.svg || config.node.svg;\n  const fontColor = node.fontColor || config.node.fontColor;\n\n  return {\n    ...node,\n    className: CONST.NODE_CLASS_NAME,\n    cursor: config.node.mouseCursor,\n    // eslint-disable-next-line no-restricted-globals\n    cx: node?.x || screen.width / 2.5,\n    // eslint-disable-next-line no-restricted-globals\n    cy: node?.y || screen.height / 2.8,\n    dx,\n    fill,\n    fontColor,\n    fontSize: fontSize * t,\n    fontWeight: highlight\n      ? config.node.highlightFontWeight\n      : config.node.fontWeight,\n    id: node.id,\n    label,\n    opacity,\n    overrideGlobalViewGenerator: !node.viewGenerator && node.svg,\n    renderLabel: node.renderLabel || config.node.renderLabel,\n    size: nodeSize * t,\n    stroke,\n    strokeWidth: strokeWidth * t,\n    svg,\n    type: node.symbolType || config.node.symbolType,\n    viewGenerator: node.viewGenerator || config.node.viewGenerator,\n    onClickNode: nodeCallbacks.onClickNode,\n    onMouseOut: nodeCallbacks.onMouseOut,\n    onMouseOverNode: nodeCallbacks.onMouseOverNode,\n    onRightClickNode: nodeCallbacks.onRightClickNode\n  };\n}\n\nexport { buildLinkProps, buildNodeProps };\n"]},"metadata":{},"sourceType":"module"}