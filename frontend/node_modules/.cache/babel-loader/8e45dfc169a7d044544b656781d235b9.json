{"ast":null,"code":"/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\nimport { symbolCircle as d3SymbolCircle, symbolCross as d3SymbolCross, symbolDiamond as d3SymbolDiamond, symbolSquare as d3SymbolSquare, symbolStar as d3SymbolStar, symbolTriangle as d3SymbolTriangle, symbolWye as d3SymbolWye, symbol as d3Symbol } from \"d3-shape\";\nimport CONST from \"./node.const\";\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\n\nfunction _convertTypeToD3Symbol(typeName) {\n  switch (typeName) {\n    case CONST.SYMBOLS.CIRCLE:\n      return d3SymbolCircle;\n\n    case CONST.SYMBOLS.CROSS:\n      return d3SymbolCross;\n\n    case CONST.SYMBOLS.DIAMOND:\n      return d3SymbolDiamond;\n\n    case CONST.SYMBOLS.SQUARE:\n      return d3SymbolSquare;\n\n    case CONST.SYMBOLS.STAR:\n      return d3SymbolStar;\n\n    case CONST.SYMBOLS.TRIANGLE:\n      return d3SymbolTriangle;\n\n    case CONST.SYMBOLS.WYE:\n      return d3SymbolWye;\n\n    default:\n      return d3SymbolCircle;\n  }\n}\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\n\n\nfunction buildSvgSymbol(size = CONST.DEFAULT_NODE_SIZE, symbolTypeDesc = CONST.SYMBOLS.CIRCLE) {\n  return d3Symbol().size(() => size).type(() => _convertTypeToD3Symbol(symbolTypeDesc))();\n}\n\nexport default {\n  buildSvgSymbol\n};","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/Graph/node/node.helper.js"],"names":["symbolCircle","d3SymbolCircle","symbolCross","d3SymbolCross","symbolDiamond","d3SymbolDiamond","symbolSquare","d3SymbolSquare","symbolStar","d3SymbolStar","symbolTriangle","d3SymbolTriangle","symbolWye","d3SymbolWye","symbol","d3Symbol","CONST","_convertTypeToD3Symbol","typeName","SYMBOLS","CIRCLE","CROSS","DIAMOND","SQUARE","STAR","TRIANGLE","WYE","buildSvgSymbol","size","DEFAULT_NODE_SIZE","symbolTypeDesc","type"],"mappings":"AAAA;;;;;AAKA,SACIA,YAAY,IAAIC,cADpB,EAEIC,WAAW,IAAIC,aAFnB,EAGIC,aAAa,IAAIC,eAHrB,EAIIC,YAAY,IAAIC,cAJpB,EAKIC,UAAU,IAAIC,YALlB,EAMIC,cAAc,IAAIC,gBANtB,EAOIC,SAAS,IAAIC,WAPjB,EAQIC,MAAM,IAAIC,QARd,QASO,UATP;AAWA,OAAOC,KAAP,MAAkB,cAAlB;AAEA;;;;;;;;;AAQA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AACtC,UAAQA,QAAR;AACI,SAAKF,KAAK,CAACG,OAAN,CAAcC,MAAnB;AACI,aAAOnB,cAAP;;AACJ,SAAKe,KAAK,CAACG,OAAN,CAAcE,KAAnB;AACI,aAAOlB,aAAP;;AACJ,SAAKa,KAAK,CAACG,OAAN,CAAcG,OAAnB;AACI,aAAOjB,eAAP;;AACJ,SAAKW,KAAK,CAACG,OAAN,CAAcI,MAAnB;AACI,aAAOhB,cAAP;;AACJ,SAAKS,KAAK,CAACG,OAAN,CAAcK,IAAnB;AACI,aAAOf,YAAP;;AACJ,SAAKO,KAAK,CAACG,OAAN,CAAcM,QAAnB;AACI,aAAOd,gBAAP;;AACJ,SAAKK,KAAK,CAACG,OAAN,CAAcO,GAAnB;AACI,aAAOb,WAAP;;AACJ;AACI,aAAOZ,cAAP;AAhBR;AAkBH;AAED;;;;;;;;;;AAQA,SAAS0B,cAAT,CAAwBC,IAAI,GAAGZ,KAAK,CAACa,iBAArC,EAAwDC,cAAc,GAAGd,KAAK,CAACG,OAAN,CAAcC,MAAvF,EAA+F;AAC3F,SAAOL,QAAQ,GACVa,IADE,CACG,MAAMA,IADT,EAEFG,IAFE,CAEG,MAAMd,sBAAsB,CAACa,cAAD,CAF/B,GAAP;AAGH;;AAED,eAAe;AACXH,EAAAA;AADW,CAAf","sourcesContent":["/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\nimport {\n    symbolCircle as d3SymbolCircle,\n    symbolCross as d3SymbolCross,\n    symbolDiamond as d3SymbolDiamond,\n    symbolSquare as d3SymbolSquare,\n    symbolStar as d3SymbolStar,\n    symbolTriangle as d3SymbolTriangle,\n    symbolWye as d3SymbolWye,\n    symbol as d3Symbol,\n} from \"d3-shape\";\n\nimport CONST from \"./node.const\";\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\nfunction _convertTypeToD3Symbol(typeName) {\n    switch (typeName) {\n        case CONST.SYMBOLS.CIRCLE:\n            return d3SymbolCircle;\n        case CONST.SYMBOLS.CROSS:\n            return d3SymbolCross;\n        case CONST.SYMBOLS.DIAMOND:\n            return d3SymbolDiamond;\n        case CONST.SYMBOLS.SQUARE:\n            return d3SymbolSquare;\n        case CONST.SYMBOLS.STAR:\n            return d3SymbolStar;\n        case CONST.SYMBOLS.TRIANGLE:\n            return d3SymbolTriangle;\n        case CONST.SYMBOLS.WYE:\n            return d3SymbolWye;\n        default:\n            return d3SymbolCircle;\n    }\n}\n\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\nfunction buildSvgSymbol(size = CONST.DEFAULT_NODE_SIZE, symbolTypeDesc = CONST.SYMBOLS.CIRCLE) {\n    return d3Symbol()\n        .size(() => size)\n        .type(() => _convertTypeToD3Symbol(symbolTypeDesc))();\n}\n\nexport default {\n    buildSvgSymbol,\n};\n"]},"metadata":{},"sourceType":"module"}