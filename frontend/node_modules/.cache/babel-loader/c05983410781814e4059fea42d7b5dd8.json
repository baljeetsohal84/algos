{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"../../React-D3-Graph/Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./GraphVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\nclass PriorityQueue {\n  constructor() {\n    this.values = [];\n  }\n\n  enqueue(val, priority) {\n    this.values.push({\n      val,\n      priority\n    });\n    this.sort();\n  }\n\n  dequeue() {\n    return this.values.shift();\n  }\n\n  sort() {\n    this.values.sort((a, b) => a.priority - b.priority);\n  }\n\n} // Graph Visualizer component to be called in visualizer page.\n\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.onClickAddNode = () => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.state.data.nodes.push({\n          id: newNode\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors; // Adds node to the neighbor array in the state's algoData\n\n      let found = false;\n\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        if (this.state.addNodeName in undirected_neighbors[i]) {\n          found = true;\n        }\n\n        if (this.state.addNodeName in directed_neighbors[i]) {\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var name = this.state.addNodeName;\n        let undirected_neighbors = this.state.algoData.undirected_neighbors;\n        let directed_neighbors = this.state.algoData.directed_neighbors;\n        var newNeighbor = {};\n        newNeighbor[name] = [];\n        undirected_neighbors.push(newNeighbor);\n        directed_neighbors.push(newNeighbor);\n        this.setState({\n          undirected_neighbors: undirected_neighbors,\n          directed_neighbors: directed_neighbors\n        });\n        console.log(\"Added to UNDIRECTED_NEIGHBORS: \", this.state.algoData.undirected_neighbors);\n        console.log(\"Added to DIRECTED NEIGHBORS: \", this.state.algoData.directed_neighbors);\n      }\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter as: name\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        let neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (this.state.removeNodeName in neighbors[i]) {\n            let undirected_neighbors = this.state.algoData.undirected_neighbors;\n            let directed_neighbors = this.state.algoData.directed_neighbors; // First, remove any instances of the node in any of the nodes' neighbors\n\n            for (let i = 0; i < undirected_neighbors.length; i++) {\n              let key = Object.keys(undirected_neighbors[i])[0];\n              undirected_neighbors[i][key].filter(l => l[0] !== this.state.removeNodeName);\n\n              if (key === this.state.removeNodeName) {\n                undirected_neighbors.splice(i, 1);\n              }\n            } // Do the same for the directed_neighbors list\n\n\n            for (let i = 0; i < directed_neighbors.length; i++) {\n              let key = Object.keys(directed_neighbors[i])[0];\n              directed_neighbors[i][key].filter(l => l[0] !== this.state.removeNodeName);\n\n              if (key === this.state.removeNodeName) {\n                directed_neighbors.splice(i, 1);\n              }\n            } // Put the lists back into the state\n\n\n            this.setState({\n              undirected_neighbors: undirected_neighbors,\n              directed_neighbors: directed_neighbors\n            });\n            console.log(\"Removed from UNDIRECTED_NEIGHBORS: \", this.state.algoData.undirected_neighbors);\n            console.log(\"Removed from DIRECTED NEIGHBORS: \", this.state.algoData.directed_neighbors);\n          }\n        }\n\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter as: name\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target, weight;\n        [source, target, weight] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        weight = parseInt(weight);\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists || !weight) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target, weight\"\n            });\n            return;\n          }\n        } // Push to the links list in the data state\n\n\n        this.state.data.links.push({\n          source: source,\n          target: target,\n          label: weight\n        });\n        var found_in_undirected = false;\n        var found_in_directed = false;\n        var target_weight = [target, weight];\n        var source_weight = [source, weight];\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          let already_exists = false; // Add both source and target to each other's neighbors list because the graph is undirected\n\n          if (source in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_undirected = true;\n          }\n\n          already_exists = false;\n\n          if (target in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n              if (source === undirected_neighbors[i][target][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][target].push(source_weight);\n            }\n\n            found_in_undirected = true;\n          }\n        } // Push to neighbors list if a node already\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          let already_exists = false; // Add only the target node to the source neighbors list because it is a directed graph\n\n          if (source in directed_neighbors[i]) {\n            for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              directed_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_directed = true;\n          }\n        } // Else push a new list containing this new node as a neighbor\n\n\n        if (!found_in_undirected) {\n          let sourceNeighbor = {};\n          let targetNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          targetNeighbor[source] = source_weight;\n          undirected_neighbors.push(sourceNeighbor);\n          undirected_neighbors.push(targetNeighbor);\n        }\n\n        if (!found_in_directed) {\n          let sourceNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          directed_neighbors.push(sourceNeighbor);\n        }\n\n        var algoData = this.state.algoData;\n        algoData.undirected_neighbors = undirected_neighbors;\n        algoData.directed_neighbors = directed_neighbors;\n        this.setState({\n          algoData: algoData\n        });\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Remove links for both the source and target in the undirected neighbors list\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          if (source in undirected_neighbors[i]) {\n            undirected_neighbors[i][source].filter(l => l[0] !== target);\n          }\n\n          if (target in undirected_neighbors[i]) {\n            undirected_neighbors[i][target].filter(l => l[0] !== source);\n          }\n        } // Remove links for the directed neighbors list\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          if (source in directed_neighbors[i]) {\n            directed_neighbors[i][source].filter(l => l[0] !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        endNode: this.state.algoData.endNode,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addEndNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        endNode: event.target.value,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._handleDirectedCheckBox = e => {\n      const config = this.state.config;\n      config.directed = this.refs.directed.checked;\n      this.setState({\n        config: config\n      });\n    };\n\n    this._handleWeightedCheckBox = e => {\n      const config = this.state.config;\n      config.link.renderLabel = this.refs.weighted.checked;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"dfs\") {\n        this.depthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {\n        this.dijkstraAlgorithm();\n      }\n    };\n\n    this.depthFirstSearch = () => {\n      console.log(this.state.algoData.neighbors);\n\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false; // Uses the appropriate neighbors list if directed is turned on or not\n\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors; // Does a loop through the undirect and directed neighbors list to make sure both are valid nodes\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (startNode in neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        } // Checks whether both the start node and end node are valid\n\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = this.state.data.algoData;\n            algoData.stack = [];\n            this.setState({\n              algoData\n            });\n          } // Intiailizes the variables needed for depth-first search\n\n\n          this.state.algoData.stack = [];\n          this.state.algoData.stack.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.stack !== undefined || this.state.algoData.stack.length !== 0) {\n            const curr = this.state.algoData.stack.pop();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++; // For looping through the neighbors array\n\n            for (let i = 0; i < neighbors.length; i++) {\n              if (curr in neighbors[i] && neighbors[i][curr] !== null && neighbors[i][curr].length !== 0) {\n                // For looping through the array within the neighbors array, this contains the name and weight of the link\n                for (let j = 0; j < neighbors[i][curr].length; j++) {\n                  const newNode = neighbors[i][curr][j][0];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.stack.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n      }\n    };\n\n    this.breadthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false; // Uses the appropriate neighbors list if directed is turned on or not\n\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (startNode in neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = {\n              startNode: this.state.algoData.stack,\n              endNode: this.state.algoData.endNode,\n              undirected_neighbors: this.state.algoData.undirected_neighbors,\n              directed_neighbors: this.state.algoData.directed_neighbors,\n              algorithm: this.state.algoData.algorithm,\n              startAlgorithm: this.state.algoData.startAlgorithm,\n              stack: []\n            };\n            this.setState({\n              algoData\n            });\n          } // Initializes all the variables needed for the breadth-first search\n\n\n          this.state.algoData.queue = [];\n          this.state.algoData.queue.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.queue !== undefined || this.state.algoData.queue.length !== 0) {\n            const curr = this.state.algoData.queue.shift();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++;\n\n            for (let i = 0; i < neighbors.length; i++) {\n              if (curr in neighbors[i] && neighbors[i][curr] !== null && neighbors[i][curr].length !== 0) {\n                for (let j = 0; j < neighbors[i][curr].length; j++) {\n                  const newNode = neighbors[i][curr][j][0];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.queue.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.dijkstraAlgorithm = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false; // Uses the appropriate neighbors list if directed is turned on or not\n\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (startNode in neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = this.state.algoData;\n            algoData.stack = [];\n            this.setState({\n              algoData: algoData\n            });\n          }\n\n          const costFromStartTo = {};\n          const checkList = new PriorityQueue();\n          const prev = {};\n          let current;\n          let path = [];\n          var neighbors = this.state.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n          var adjacencyList = {};\n\n          for (let i = 0; i < neighbors.length; i++) {\n            let key = Object.keys(neighbors[i])[0];\n            adjacencyList[key] = {};\n\n            for (let j = 0; j < neighbors[i][key].length; j++) {\n              adjacencyList[key][neighbors[i][key][j][0]] = neighbors[i][key][j][1];\n            }\n          }\n\n          for (let vert in adjacencyList) {\n            if (vert === startNode) {\n              costFromStartTo[vert] = 0;\n              checkList.enqueue(vert, 0);\n            } else {\n              costFromStartTo[vert] = Infinity;\n            }\n\n            prev[vert] = null;\n          }\n\n          while (checkList.values.length) {\n            current = checkList.dequeue().val;\n\n            if (current === endNode) {\n              // Done\n              while (prev[current]) {\n                path.push(current);\n                current = prev[current];\n              }\n\n              break;\n            } else {\n              for (let neighbor in adjacencyList[current]) {\n                let costToNeighbor = costFromStartTo[current] + adjacencyList[current][neighbor];\n\n                if (costToNeighbor < costFromStartTo[neighbor]) {\n                  costFromStartTo[neighbor] = costToNeighbor;\n                  prev[neighbor] = current;\n                  checkList.enqueue(neighbor, costToNeighbor);\n                }\n              }\n            }\n          }\n\n          path = path.concat(current).reverse();\n          var counter = 0;\n          console.log(path);\n\n          for (let i = 0; i < path.length; i++) {\n            if (path[i] === endNode) {\n              for (let j = 0; j < 5; j++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(path[i], counter), 1000 * (counter + 1));\n            counter++;\n          }\n\n          this.resetState(counter);\n          /*\n          // Initializes all the variables needed for the breadth-first search\n          this.state.algoData.queue = [];\n          this.state.algoData.queue.push(startNode);\n          var counter = 0;\n          visited[startNode] = startNode;\n           while (\n            this.state.algoData.queue !== undefined ||\n            this.state.algoData.queue.length !== 0\n          ) {\n            const curr = this.state.algoData.queue.shift();\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n             setTimeout(\n              () => this.highlightHandler(curr, counter),\n              1000 * (counter + 1)\n            );\n            counter++;\n             for (let i = 0; i < neighbors.length; i++) {\n              if (\n                curr in neighbors[i] &&\n                neighbors[i][curr] !== null &&\n                neighbors[i][curr].length !== 0\n              ) {\n                for (let j = 0; j < neighbors[i][curr].length; j++) {\n                  const newNode = neighbors[i][curr][j][0];\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n                   this.state.algoData.queue.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          }\n           // Reset node color state after DFS is done\n          this.resetState();\n          */\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      nodes: [{\n        id: \"Harry\",\n        color: \"\",\n        strokeColor: \"\"\n      }, {\n        id: \"Sally\",\n        color: \"\",\n        strokeColor: \"\"\n      }, {\n        id: \"Alice\",\n        color: \"\",\n        strokeColor: \"\"\n      }],\n      links: [{\n        source: \"Harry\",\n        target: \"Sally\",\n        label: \"10\"\n      }, {\n        source: \"Harry\",\n        target: \"Alice\",\n        label: \"15\"\n      }]\n    };\n    const _undirected_neighbors = [{\n      Harry: [[\"Sally\", 10], [\"Alice\", 15]]\n    }, {\n      Sally: [[\"Harry\", 10]]\n    }, {\n      Alice: [[\"Harry\", 15]]\n    }];\n    const _directed_neighbors = [{\n      Harry: [[\"Sally\", 10], [\"Alice\", 15]]\n    }, {\n      Sally: []\n    }, {\n      Alice: []\n    }];\n    /*\n    // The Office characters data\n    const data = {\n      //apply characteristics for each node\n      nodes: [\n        { id: \"Michael\", color: \"\", strokeColor: \"\" },\n        { id: \"Jim\", color: \"\", strokeColor: \"\" },\n        { id: \"Pam\", color: \"\", strokeColor: \"\" },\n        { id: \"Dwight\", color: \"\", strokeColor: \"\" },\n        { id: \"Angela\", color: \"\", strokeColor: \"\" },\n        { id: \"Jan\", color: \"\", strokeColor: \"\" },\n        { id: \"Kevin\", color: \"\", strokeColor: \"\" },\n        { id: \"Andy\", color: \"\", strokeColor: \"\" },\n        { id: \"Toby\", color: \"\", strokeColor: \"\" },\n        { id: \"Erin\", color: \"\", strokeColor: \"\" },\n        { id: \"Karen\", color: \"\", strokeColor: \"\" },\n        { id: \"Stanley\", color: \"\", strokeColor: \"\" },\n        { id: \"Phyllis\", color: \"\", strokeColor: \"\" },\n        { id: \"Oscar\", color: \"\", strokeColor: \"\" },\n        { id: \"Ryan\", color: \"\", strokeColor: \"\" },\n        { id: \"Kelly\", color: \"\", strokeColor: \"\" },\n        { id: \"Holly\", color: \"\", strokeColor: \"\" },\n        { id: \"Senator\", color: \"\", strokeColor: \"\" },\n        { id: \"Roy\", color: \"\", strokeColor: \"\" },\n        { id: \"Bob Vance, Vance Refrigeration\" },\n      ],\n      links: [\n        { source: \"Michael\", target: \"Jan\" },\n        { source: \"Michael\", target: \"Holly\" },\n        { source: \"Michael\", target: \"Ryan\" },\n        { source: \"Michael\", target: \"Jim\" },\n        { source: \"Michael\", target: \"Toby\" },\n        { source: \"Jim\", target: \"Pam\" },\n        { source: \"Jim\", target: \"Karen\" },\n        { source: \"Jim\", target: \"Dwight\" },\n        { source: \"Pam\", target: \"Roy\" },\n        { source: \"Dwight\", target: \"Angela\" },\n        { source: \"Dwight\", target: \"Andy\" },\n        { source: \"Andy\", target: \"Erin\" },\n        { source: \"Ryan\", target: \"Kelly\" },\n        { source: \"Angela\", target: \"Oscar\" },\n        { source: \"Angela\", target: \"Kevin\" },\n        { source: \"Angela\", target: \"Senator\" },\n        { source: \"Oscar\", target: \"Senator\" },\n        { source: \"Oscar\", target: \"Phyllis\" },\n        { source: \"Phyllis\", target: \"Stanley\" },\n        { source: \"Phyllis\", target: \"Bob Vance, Vance Refrigeration\" },\n      ],\n    };\n     const neighbors = [\n      { Michael: [\"Jan\", \"Holly\", \"Ryan\", \"Jim\", \"Toby\"] },\n      { Jim: [\"Pam\", \"Karen\", \"Dwight\"] },\n      { Pam: [\"Roy\"] },\n      { Dwight: [\"Angela\", \"Andy\"] },\n      { Andy: [\"Erin\"] },\n      { Ryan: [\"Kelly\"] },\n      { Angela: [\"Oscar\", \"Kevin\", \"Senator\"] },\n      { Oscar: [\"Senator\", \"Phyllis\"] },\n      { Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"] },\n    ];\n    */\n    // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      directed: false,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        fontSize: 13,\n        renderLabel: false\n      }\n    };\n    const _algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      undirected_neighbors: _undirected_neighbors,\n      directed_neighbors: _directed_neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name\",\n      removeNodePlaceholder: \"Enter as: name\",\n      addLinkPlaceholder: \"Enter as: source, target, weight\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: \"\" //state for Algorithm tabs\n\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map(item => {\n      return React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1165\n        },\n        __self: this\n      }, item);\n    });\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tLog fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1171\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"list-group list-group-flush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1172\n        },\n        __self: this\n      }, neighborItems)), console.log(\"GRAPH\"), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1178\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1179\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1186\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1187\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1195\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1200\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1209\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1210\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1211\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1212\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1226\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1227\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1228\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1243\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1244\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1245\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1262\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1263\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1270\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1271\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1279\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1288\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1289\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        defaultChecked: false,\n        ref: \"directed\",\n        onChange: this._handleDirectedCheckBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1290\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        defaultChecked: false,\n        ref: \"weighted\",\n        onChange: this._handleWeightedCheckBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1299\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1310\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1311\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1312\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter as: name\",\n        onChange: this._addStartNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1313\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1324\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1325\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter as: name\",\n        onChange: this._addEndNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1326\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        className: \"dropdown pt-2\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1337\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1338\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1342\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        onSelect: () => this.state.algoData.algorithm = \"dfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1343\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"2\",\n        onSelect: () => this.state.algoData.algorithm = \"bfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1349\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        onSelect: () => this.state.algoData.algorithm = \"djk\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1355\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm() //Should call selected algorithm\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1364\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1376\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1377\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1384\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1385\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1393\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1407\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1408\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1409\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1421\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1422\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1423\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1434\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1435\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1445\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1446\n        },\n        __self: this\n      }))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1458\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Node List\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1459\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1466\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-list-ul\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1467\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1475\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1484\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"json-data-container mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1485\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1486\n        },\n        __self: this\n      }, this.state.data.nodes.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (i = 0; i < neighbors.length; i++) {\n          if (name in neighbors[i]) {\n            return React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1498\n              },\n              __self: this\n            }, React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: \"neighbors: \",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1499\n              },\n              __self: this\n            }, neighbors[i][name].map((neighbor, i) => {\n              return React.createElement(\"div\", {\n                className: \"info\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1505\n                },\n                __self: this\n              }, neighbor[0]);\n            })));\n          }\n        }\n      })))))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1520\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1529\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx"],"names":["React","Graph","TreeView","ReactTooltip","Dropdown","Form","Button","PriorityQueue","constructor","values","enqueue","val","priority","push","sort","dequeue","shift","a","b","GraphVisualizer","Component","props","onClickAddNode","state","addNodeName","setState","addNodePlaceholder","data","nodes","length","newNode","id","links","undirected_neighbors","algoData","directed_neighbors","found","i","name","newNeighbor","console","log","onClickRemoveNode","removeNodeName","removeNodePlaceholder","filter","l","source","target","neighbors","config","directed","key","Object","keys","splice","onClickAddLink","addLink","weight","split","e","trim","parseInt","sourceExists","targetExists","addLinkPlaceholder","j","label","found_in_undirected","found_in_directed","target_weight","source_weight","already_exists","sourceNeighbor","targetNeighbor","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","endNode","algorithm","startAlgorithm","stack","_addEndNodeHandleChange","_handleAddKeyEnter","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_handleDirectedCheckBox","refs","checked","_handleWeightedCheckBox","link","renderLabel","weighted","nodeSizeHandler","size","node","nodeColorHandler","color","linkColorHandler","linkColor","depthFirstSearch","breadthFirstSearch","dijkstraAlgorithm","startNodeIsValid","endNodeIsValid","visited","counter","undefined","curr","pop","setTimeout","foundTarget","resetState","highlightHandler","queue","costFromStartTo","checkList","prev","current","path","adjacencyList","vert","Infinity","neighbor","costToNeighbor","concat","reverse","rotateHandler","forEach","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","nodeColor","strokeColor","then","nodeIndex","findIndex","origNode","Harry","Sally","Alice","nodeHighlightBehavior","rederLabel","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","highlightColor","fontSize","generatedConfig","nodeIdToBeRemoved","render","neighborItems","map","item","document","getElementById","type","_onRightClickNode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"../../React-D3-Graph/Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./GraphVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\nclass PriorityQueue {\n  constructor() {\n    this.values = [];\n  }\n\n  enqueue(val, priority) {\n    this.values.push({ val, priority });\n    this.sort();\n  }\n  dequeue() {\n    return this.values.shift();\n  }\n  sort() {\n    this.values.sort((a, b) => a.priority - b.priority);\n  }\n}\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [\n        { id: \"Harry\", color: \"\", strokeColor: \"\" },\n        { id: \"Sally\", color: \"\", strokeColor: \"\" },\n        { id: \"Alice\", color: \"\", strokeColor: \"\" },\n      ],\n      links: [\n        { source: \"Harry\", target: \"Sally\", label: \"10\" },\n        { source: \"Harry\", target: \"Alice\", label: \"15\" },\n      ],\n    };\n\n    const undirected_neighbors = [\n      {\n        Harry: [\n          [\"Sally\", 10],\n          [\"Alice\", 15],\n        ],\n      },\n      { Sally: [[\"Harry\", 10]] },\n      { Alice: [[\"Harry\", 15]] },\n    ];\n\n    const directed_neighbors = [\n      {\n        Harry: [\n          [\"Sally\", 10],\n          [\"Alice\", 15],\n        ],\n      },\n      { Sally: [] },\n      { Alice: [] },\n    ];\n\n    /*\n    // The Office characters data\n    const data = {\n      //apply characteristics for each node\n      nodes: [\n        { id: \"Michael\", color: \"\", strokeColor: \"\" },\n        { id: \"Jim\", color: \"\", strokeColor: \"\" },\n        { id: \"Pam\", color: \"\", strokeColor: \"\" },\n        { id: \"Dwight\", color: \"\", strokeColor: \"\" },\n        { id: \"Angela\", color: \"\", strokeColor: \"\" },\n        { id: \"Jan\", color: \"\", strokeColor: \"\" },\n        { id: \"Kevin\", color: \"\", strokeColor: \"\" },\n        { id: \"Andy\", color: \"\", strokeColor: \"\" },\n        { id: \"Toby\", color: \"\", strokeColor: \"\" },\n        { id: \"Erin\", color: \"\", strokeColor: \"\" },\n        { id: \"Karen\", color: \"\", strokeColor: \"\" },\n        { id: \"Stanley\", color: \"\", strokeColor: \"\" },\n        { id: \"Phyllis\", color: \"\", strokeColor: \"\" },\n        { id: \"Oscar\", color: \"\", strokeColor: \"\" },\n        { id: \"Ryan\", color: \"\", strokeColor: \"\" },\n        { id: \"Kelly\", color: \"\", strokeColor: \"\" },\n        { id: \"Holly\", color: \"\", strokeColor: \"\" },\n        { id: \"Senator\", color: \"\", strokeColor: \"\" },\n        { id: \"Roy\", color: \"\", strokeColor: \"\" },\n        { id: \"Bob Vance, Vance Refrigeration\" },\n      ],\n      links: [\n        { source: \"Michael\", target: \"Jan\" },\n        { source: \"Michael\", target: \"Holly\" },\n        { source: \"Michael\", target: \"Ryan\" },\n        { source: \"Michael\", target: \"Jim\" },\n        { source: \"Michael\", target: \"Toby\" },\n        { source: \"Jim\", target: \"Pam\" },\n        { source: \"Jim\", target: \"Karen\" },\n        { source: \"Jim\", target: \"Dwight\" },\n        { source: \"Pam\", target: \"Roy\" },\n        { source: \"Dwight\", target: \"Angela\" },\n        { source: \"Dwight\", target: \"Andy\" },\n        { source: \"Andy\", target: \"Erin\" },\n        { source: \"Ryan\", target: \"Kelly\" },\n        { source: \"Angela\", target: \"Oscar\" },\n        { source: \"Angela\", target: \"Kevin\" },\n        { source: \"Angela\", target: \"Senator\" },\n        { source: \"Oscar\", target: \"Senator\" },\n        { source: \"Oscar\", target: \"Phyllis\" },\n        { source: \"Phyllis\", target: \"Stanley\" },\n        { source: \"Phyllis\", target: \"Bob Vance, Vance Refrigeration\" },\n      ],\n    };\n\n    const neighbors = [\n      { Michael: [\"Jan\", \"Holly\", \"Ryan\", \"Jim\", \"Toby\"] },\n      { Jim: [\"Pam\", \"Karen\", \"Dwight\"] },\n      { Pam: [\"Roy\"] },\n      { Dwight: [\"Angela\", \"Andy\"] },\n      { Andy: [\"Erin\"] },\n      { Ryan: [\"Kelly\"] },\n      { Angela: [\"Oscar\", \"Kevin\", \"Senator\"] },\n      { Oscar: [\"Senator\", \"Phyllis\"] },\n      { Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"] },\n    ];\n    */\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      directed: false,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\",\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        fontSize: 13,\n        renderLabel: false,\n      },\n    };\n\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      undirected_neighbors: undirected_neighbors,\n      directed_neighbors: directed_neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name\",\n      removeNodePlaceholder: \"Enter as: name\",\n      addLinkPlaceholder: \"Enter as: source, target, weight\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: \"\", //state for Algorithm tabs\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  onClickAddNode = () => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      this.state.data.nodes.push({ id: newNode });\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n\n    var undirected_neighbors = this.state.algoData.undirected_neighbors;\n    var directed_neighbors = this.state.algoData.directed_neighbors;\n\n    // Adds node to the neighbor array in the state's algoData\n    let found = false;\n    for (let i = 0; i < undirected_neighbors.length; i++) {\n      if (this.state.addNodeName in undirected_neighbors[i]) {\n        found = true;\n      }\n      if (this.state.addNodeName in directed_neighbors[i]) {\n        found = true;\n      }\n    }\n\n    if (!found) {\n      var name = this.state.addNodeName;\n      let undirected_neighbors = this.state.algoData.undirected_neighbors;\n      let directed_neighbors = this.state.algoData.directed_neighbors;\n      var newNeighbor = {};\n      newNeighbor[name] = [];\n\n      undirected_neighbors.push(newNeighbor);\n      directed_neighbors.push(newNeighbor);\n\n      this.setState({\n        undirected_neighbors: undirected_neighbors,\n        directed_neighbors: directed_neighbors,\n      });\n\n      console.log(\n        \"Added to UNDIRECTED_NEIGHBORS: \",\n        this.state.algoData.undirected_neighbors\n      );\n      console.log(\n        \"Added to DIRECTED NEIGHBORS: \",\n        this.state.algoData.directed_neighbors\n      );\n    }\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter as: name\",\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      let neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (this.state.removeNodeName in neighbors[i]) {\n          let undirected_neighbors = this.state.algoData.undirected_neighbors;\n          let directed_neighbors = this.state.algoData.directed_neighbors;\n\n          // First, remove any instances of the node in any of the nodes' neighbors\n          for (let i = 0; i < undirected_neighbors.length; i++) {\n            let key = Object.keys(undirected_neighbors[i])[0];\n            undirected_neighbors[i][key].filter(\n              (l) => l[0] !== this.state.removeNodeName\n            );\n            if (key === this.state.removeNodeName) {\n              undirected_neighbors.splice(i, 1);\n            }\n          }\n          // Do the same for the directed_neighbors list\n          for (let i = 0; i < directed_neighbors.length; i++) {\n            let key = Object.keys(directed_neighbors[i])[0];\n            directed_neighbors[i][key].filter(\n              (l) => l[0] !== this.state.removeNodeName\n            );\n            if (key === this.state.removeNodeName) {\n              directed_neighbors.splice(i, 1);\n            }\n          }\n\n          // Put the lists back into the state\n          this.setState({\n            undirected_neighbors: undirected_neighbors,\n            directed_neighbors: directed_neighbors,\n          });\n\n          console.log(\n            \"Removed from UNDIRECTED_NEIGHBORS: \",\n            this.state.algoData.undirected_neighbors\n          );\n          console.log(\n            \"Removed from DIRECTED NEIGHBORS: \",\n            this.state.algoData.directed_neighbors\n          );\n        }\n      }\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter as: name\",\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target, weight;\n      [source, target, weight] = this.state.addLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      weight = parseInt(weight);\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists || !weight) {\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\",\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\",\n          });\n          return;\n        }\n      }\n\n      // Push to the links list in the data state\n      this.state.data.links.push({\n        source: source,\n        target: target,\n        label: weight,\n      });\n\n      var found_in_undirected = false;\n      var found_in_directed = false;\n      var target_weight = [target, weight];\n      var source_weight = [source, weight];\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        let already_exists = false;\n        // Add both source and target to each other's neighbors list because the graph is undirected\n        if (source in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][source].push(target_weight);\n          }\n          found_in_undirected = true;\n        }\n\n        already_exists = false;\n\n        if (target in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n            if (source === undirected_neighbors[i][target][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][target].push(source_weight);\n          }\n          found_in_undirected = true;\n        }\n      }\n\n      // Push to neighbors list if a node already\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        let already_exists = false;\n        // Add only the target node to the source neighbors list because it is a directed graph\n        if (source in directed_neighbors[i]) {\n          for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            directed_neighbors[i][source].push(target_weight);\n          }\n          found_in_directed = true;\n        }\n      }\n\n      // Else push a new list containing this new node as a neighbor\n      if (!found_in_undirected) {\n        let sourceNeighbor = {};\n        let targetNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n        targetNeighbor[source] = source_weight;\n\n        undirected_neighbors.push(sourceNeighbor);\n        undirected_neighbors.push(targetNeighbor);\n      }\n      if (!found_in_directed) {\n        let sourceNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n\n        directed_neighbors.push(sourceNeighbor);\n      }\n\n      var algoData = this.state.algoData;\n      algoData.undirected_neighbors = undirected_neighbors;\n      algoData.directed_neighbors = directed_neighbors;\n\n      this.setState({\n        algoData: algoData,\n      });\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target, weight\",\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Remove links for both the source and target in the undirected neighbors list\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        if (source in undirected_neighbors[i]) {\n          undirected_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n        if (target in undirected_neighbors[i]) {\n          undirected_neighbors[i][target].filter((l) => l[0] !== source);\n        }\n      }\n\n      // Remove links for the directed neighbors list\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        if (source in directed_neighbors[i]) {\n          directed_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      endNode: this.state.algoData.endNode,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addEndNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      endNode: event.target.value,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _handleDirectedCheckBox = (e) => {\n    const config = this.state.config;\n\n    config.directed = this.refs.directed.checked;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  _handleWeightedCheckBox = (e) => {\n    const config = this.state.config;\n\n    config.link.renderLabel = this.refs.weighted.checked;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"dfs\") {\n      this.depthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n      this.dijkstraAlgorithm();\n    }\n  };\n\n  depthFirstSearch = () => {\n    console.log(this.state.algoData.neighbors);\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      // Uses the appropriate neighbors list if directed is turned on or not\n      var neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      // Does a loop through the undirect and directed neighbors list to make sure both are valid nodes\n      for (let i = 0; i < neighbors.length; i++) {\n        if (startNode in neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      // Checks whether both the start node and end node are valid\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = this.state.data.algoData;\n          algoData.stack = [];\n          this.setState({ algoData });\n        }\n\n        // Intiailizes the variables needed for depth-first search\n        this.state.algoData.stack = [];\n        this.state.algoData.stack.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.stack !== undefined ||\n          this.state.algoData.stack.length !== 0\n        ) {\n          const curr = this.state.algoData.stack.pop();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          // For looping through the neighbors array\n          for (let i = 0; i < neighbors.length; i++) {\n            if (\n              curr in neighbors[i] &&\n              neighbors[i][curr] !== null &&\n              neighbors[i][curr].length !== 0\n            ) {\n              // For looping through the array within the neighbors array, this contains the name and weight of the link\n              for (let j = 0; j < neighbors[i][curr].length; j++) {\n                const newNode = neighbors[i][curr][j][0];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.stack.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n    }\n  };\n\n  breadthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      // Uses the appropriate neighbors list if directed is turned on or not\n      var neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (startNode in neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = {\n            startNode: this.state.algoData.stack,\n            endNode: this.state.algoData.endNode,\n            undirected_neighbors: this.state.algoData.undirected_neighbors,\n            directed_neighbors: this.state.algoData.directed_neighbors,\n            algorithm: this.state.algoData.algorithm,\n            startAlgorithm: this.state.algoData.startAlgorithm,\n            stack: [],\n          };\n          this.setState({ algoData });\n        }\n\n        // Initializes all the variables needed for the breadth-first search\n        this.state.algoData.queue = [];\n        this.state.algoData.queue.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.queue !== undefined ||\n          this.state.algoData.queue.length !== 0\n        ) {\n          const curr = this.state.algoData.queue.shift();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          for (let i = 0; i < neighbors.length; i++) {\n            if (\n              curr in neighbors[i] &&\n              neighbors[i][curr] !== null &&\n              neighbors[i][curr].length !== 0\n            ) {\n              for (let j = 0; j < neighbors[i][curr].length; j++) {\n                const newNode = neighbors[i][curr][j][0];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.queue.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  dijkstraAlgorithm = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      // Uses the appropriate neighbors list if directed is turned on or not\n      var neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (startNode in neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = this.state.algoData;\n          algoData.stack = [];\n          this.setState({ algoData: algoData });\n        }\n\n        const costFromStartTo = {};\n        const checkList = new PriorityQueue();\n        const prev = {};\n\n        let current;\n        let path = [];\n        var neighbors = this.state.directed\n          ? this.state.algoData.directed_neighbors\n          : this.state.algoData.undirected_neighbors;\n\n        var adjacencyList = {};\n\n        for (let i = 0; i < neighbors.length; i++) {\n          let key = Object.keys(neighbors[i])[0];\n          adjacencyList[key] = {};\n          for (let j = 0; j < neighbors[i][key].length; j++) {\n            adjacencyList[key][neighbors[i][key][j][0]] =\n              neighbors[i][key][j][1];\n          }\n        }\n\n        for (let vert in adjacencyList) {\n          if (vert === startNode) {\n            costFromStartTo[vert] = 0;\n            checkList.enqueue(vert, 0);\n          } else {\n            costFromStartTo[vert] = Infinity;\n          }\n          prev[vert] = null;\n        }\n\n        while (checkList.values.length) {\n          current = checkList.dequeue().val;\n          if (current === endNode) {\n            // Done\n            while (prev[current]) {\n              path.push(current);\n              current = prev[current];\n            }\n            break;\n          } else {\n            for (let neighbor in adjacencyList[current]) {\n              let costToNeighbor =\n                costFromStartTo[current] + adjacencyList[current][neighbor];\n              if (costToNeighbor < costFromStartTo[neighbor]) {\n                costFromStartTo[neighbor] = costToNeighbor;\n                prev[neighbor] = current;\n                checkList.enqueue(neighbor, costToNeighbor);\n              }\n            }\n          }\n        }\n\n        path = path.concat(current).reverse();\n\n        var counter = 0;\n        console.log(path);\n        for (let i = 0; i < path.length; i++) {\n          if (path[i] === endNode) {\n            for (let j = 0; j < 5; j++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n\n          setTimeout(\n            () => this.highlightHandler(path[i], counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n        }\n\n        this.resetState(counter);\n        /*\n        // Initializes all the variables needed for the breadth-first search\n        this.state.algoData.queue = [];\n        this.state.algoData.queue.push(startNode);\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.queue !== undefined ||\n          this.state.algoData.queue.length !== 0\n        ) {\n          const curr = this.state.algoData.queue.shift();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          for (let i = 0; i < neighbors.length; i++) {\n            if (\n              curr in neighbors[i] &&\n              neighbors[i][curr] !== null &&\n              neighbors[i][curr].length !== 0\n            ) {\n              for (let j = 0; j < neighbors[i][curr].length; j++) {\n                const newNode = neighbors[i][curr][j][0];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.queue.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n        */\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  };\n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map((item) => {\n      return <li class=\"list-group-item\">{item}</li>;\n    });\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"tLog fixed-bottom\">\n          <ul class=\"list-group list-group-flush\">{neighborItems}</ul>\n        </div>\n\n        {console.log(\"GRAPH\")}\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                  defaultChecked={false}\n                  ref=\"directed\"\n                  onChange={this._handleDirectedCheckBox}\n                />\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"weight\"\n                  label=\"Weighted\"\n                  defaultChecked={false}\n                  ref=\"weighted\"\n                  onChange={this._handleWeightedCheckBox}\n                />\n              </div>\n\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"sNode\"\n                    type=\"text\"\n                    name=\"startNode\"\n                    placeholder=\"Enter as: name\"\n                    onChange={this._addStartNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <h5 class=\"font-weight-light h6\"> Target Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"tNode\"\n                    type=\"text\"\n                    name=\"tarhetNode\"\n                    placeholder=\"Enter as: name\"\n                    onChange={this._addEndNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <Dropdown className=\"dropdown pt-2\" drop=\"right\">\n                  <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-two\">\n                    Algorithm\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu id=\"algoSelection\">\n                    <Dropdown.Item\n                      eventKey=\"1\"\n                      onSelect={() => (this.state.algoData.algorithm = \"dfs\")}\n                    >\n                      Depth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"2\"\n                      onSelect={() => (this.state.algoData.algorithm = \"bfs\")}\n                    >\n                      Breadth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"3\"\n                      onSelect={() => (this.state.algoData.algorithm = \"djk\")}\n                    >\n                      Dijkstra's\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()} //Should call selected algorithm\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Add node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Add link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={this._addLinkHandleChange}\n                onKeyPress={this._handleLinkKeyEnter}\n              />\n\n              <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"removeLink\"\n                placeholder={this.state.removeLinkPlaceholder}\n                value={this.state.removeLink}\n                onChange={this._removeLinkHandleChange}\n                onKeyPress={this._handleRemoveLinkKeyEnter}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Node List\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-list-ul\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"json-data-container mt-3\">\n                <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n                  {this.state.data.nodes.map((node, i) => {\n                    const type = node.type;\n                    const name = node.id;\n\n                    var neighbors = this.state.config.directed\n                      ? this.state.algoData.directed_neighbors\n                      : this.state.algoData.undirected_neighbors;\n\n                    for (i = 0; i < neighbors.length; i++) {\n                      if (name in neighbors[i]) {\n                        return (\n                          <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                            <TreeView\n                              key={type + \"|\" + i}\n                              nodeLabel=\"neighbors: \"\n                            >\n                              {neighbors[i][name].map((neighbor, i) => {\n                                return (\n                                  <div className=\"info\">{neighbor[0]}</div>\n                                );\n                              })}\n                            </TreeView>\n                          </TreeView>\n                        );\n                      }\n                    }\n                  })}\n                </TreeView>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}