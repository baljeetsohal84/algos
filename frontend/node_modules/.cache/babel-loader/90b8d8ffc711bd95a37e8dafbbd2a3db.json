{"ast":null,"code":"/**\n * @module Graph/collapse-helper\n * @description\n * Offers a series of methods that allow graph to perform the necessary operations to\n * create the collapsible behavior. These functions will most likely operate on\n * the links matrix.\n */\nimport { getId } from \"./graph.helper\";\n/**\n * For directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\n\nfunction _isLeafDirected(inDegree, outDegree) {\n  return inDegree <= 1 && outDegree < 1;\n}\n/**\n * For not directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\n\n\nfunction _isLeafNotDirected(inDegree, outDegree) {\n  return inDegree <= 1 && outDegree <= 1;\n}\n/**\n * Given in and out degree tells whether degrees indicate a leaf or non leaf scenario.\n * @param {string} nodeId - The id of the node to get the cardinality of.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @param {boolean} directed - whether graph in context is directed or not.\n * @returns {boolean} flag that indicates whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\n\n\nfunction _isLeaf(nodeId, linksMatrix, directed) {\n  const {\n    inDegree,\n    outDegree\n  } = computeNodeDegree(nodeId, linksMatrix);\n  const fn = directed ? _isLeafDirected : _isLeafNotDirected;\n  return fn(inDegree, outDegree);\n}\n/**\n * Calculates degree (in and out) of some provided node.\n * @param {string|number} nodeId - the id of the node whom degree we want to compute.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, number>} returns object containing in and out degree of the node:\n * - inDegree: number\n * - outDegree: number\n * @memberof Graph/collapse-helper\n */\n\n\nfunction computeNodeDegree(nodeId, linksMatrix = {}) {\n  return Object.keys(linksMatrix).reduce((acc, source) => {\n    if (!linksMatrix[source]) {\n      return acc;\n    }\n\n    const currentNodeConnections = Object.keys(linksMatrix[source]);\n    return currentNodeConnections.reduce((_acc, target) => {\n      if (nodeId === source) {\n        _acc.outDegree += linksMatrix[nodeId][target];\n      }\n\n      if (nodeId === target) {\n        _acc.inDegree += linksMatrix[source][nodeId];\n      }\n\n      return _acc;\n    }, acc);\n  }, {\n    inDegree: 0,\n    outDegree: 0\n  });\n}\n/**\n * Given a node id we want to calculate the list of leaf connections\n * @param {string} rootNodeId - node who's leafs we want to calculate.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Array.<Object.<string, string>>} a list of leaf connections.\n * What is a leaf connection? A leaf connection is a link between some node A and other node B\n * where A has id equal to rootNodeId and B has inDegree 1 and outDegree 0 (or outDegree 1 but the connection is with A).\n * @memberof Graph/collapse-helper\n */\n\n\nfunction getTargetLeafConnections(rootNodeId, linksMatrix = {}, {\n  directed\n}) {\n  const rootConnectionsNodesIds = Object.keys(linksMatrix[rootNodeId]);\n  return rootConnectionsNodesIds.reduce((leafConnections, target) => {\n    if (_isLeaf(target, linksMatrix, directed)) {\n      leafConnections.push({\n        source: rootNodeId,\n        target\n      });\n    }\n\n    return leafConnections;\n  }, []);\n}\n/**\n * Given a node and the connections matrix, check if node should be displayed\n * NOTE: this function is meant to be used under the `collapsible` toggle, meaning\n * that the `isNodeVisible` actually is checking visibility on collapsible graphs.\n * If you think that this code is confusing and could potentially collide (ðŸ¤ž) with #_isLeaf\n * always remember that *A leaf can, throughout time, both a visible or an invisible node!*.\n *\n * @param {string} nodeId - The id of the node to get the cardinality of\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @returns {boolean} flag that indicates whether node should or not be displayed.\n * @memberof Graph/collapse-helper\n */\n\n\nfunction isNodeVisible(nodeId, nodes, linksMatrix) {\n  if (nodes[nodeId]._orphan) {\n    return true;\n  }\n\n  const {\n    inDegree,\n    outDegree\n  } = computeNodeDegree(nodeId, linksMatrix);\n  return inDegree > 0 || outDegree > 0;\n}\n/**\n * Updates d3Links by toggling given connections\n * @param {Array.<Object>} d3Links - An array containing all the d3 links.\n * @param {Array.<Object.<string, string>>} connectionMatrix - connections to toggle.\n * @returns {Array.<Object>} updated d3Links.\n * @memberof Graph/collapse-helper\n */\n\n\nfunction toggleLinksConnections(d3Links, connectionMatrix) {\n  return d3Links.map(d3Link => {\n    const {\n      source,\n      target\n    } = d3Link;\n    const sourceId = getId(source);\n    const targetId = getId(target); // connectionMatrix[sourceId][targetId] can be 0 or non existent\n\n    const connection = connectionMatrix && connectionMatrix[sourceId] && connectionMatrix[sourceId][targetId];\n    const isHidden = !connection;\n    return { ...d3Link,\n      isHidden\n    };\n  });\n}\n/**\n * Update matrix given array of connections to toggle.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param {Array.<Object.<string, string>>} connections - connections to toggle on matrix.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Object.<string, Object>} updated linksMatrix\n * @memberof Graph/collapse-helper\n */\n\n\nfunction toggleLinksMatrixConnections(linksMatrix, connections, {\n  directed\n}) {\n  return connections.reduce((newMatrix, link) => {\n    if (!newMatrix[link.source]) {\n      newMatrix[link.source] = {};\n    }\n\n    if (!newMatrix[link.source][link.target]) {\n      newMatrix[link.source][link.target] = 0;\n    }\n\n    const newConnectionValue = newMatrix[link.source][link.target] === 0 ? 1 : 0;\n    newMatrix[link.source][link.target] = newConnectionValue;\n\n    if (!directed) {\n      newMatrix[link.target][link.source] = newConnectionValue;\n    }\n\n    return newMatrix;\n  }, { ...linksMatrix\n  });\n}\n\nexport { computeNodeDegree, getTargetLeafConnections, isNodeVisible, toggleLinksConnections, toggleLinksMatrixConnections };","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/Graph/graph/collapse.helper.js"],"names":["getId","_isLeafDirected","inDegree","outDegree","_isLeafNotDirected","_isLeaf","nodeId","linksMatrix","directed","computeNodeDegree","fn","Object","keys","reduce","acc","source","currentNodeConnections","_acc","target","getTargetLeafConnections","rootNodeId","rootConnectionsNodesIds","leafConnections","push","isNodeVisible","nodes","_orphan","toggleLinksConnections","d3Links","connectionMatrix","map","d3Link","sourceId","targetId","connection","isHidden","toggleLinksMatrixConnections","connections","newMatrix","link","newConnectionValue"],"mappings":"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","sourcesContent":["/**\n * @module Graph/collapse-helper\n * @description\n * Offers a series of methods that allow graph to perform the necessary operations to\n * create the collapsible behavior. These functions will most likely operate on\n * the links matrix.\n */\nimport { getId } from \"./graph.helper\";\n\n/**\n * For directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeafDirected(inDegree, outDegree) {\n    return inDegree <= 1 && outDegree < 1;\n}\n\n/**\n * For not directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeafNotDirected(inDegree, outDegree) {\n    return inDegree <= 1 && outDegree <= 1;\n}\n\n/**\n * Given in and out degree tells whether degrees indicate a leaf or non leaf scenario.\n * @param {string} nodeId - The id of the node to get the cardinality of.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @param {boolean} directed - whether graph in context is directed or not.\n * @returns {boolean} flag that indicates whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeaf(nodeId, linksMatrix, directed) {\n    const { inDegree, outDegree } = computeNodeDegree(nodeId, linksMatrix);\n    const fn = directed ? _isLeafDirected : _isLeafNotDirected;\n\n    return fn(inDegree, outDegree);\n}\n\n/**\n * Calculates degree (in and out) of some provided node.\n * @param {string|number} nodeId - the id of the node whom degree we want to compute.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, number>} returns object containing in and out degree of the node:\n * - inDegree: number\n * - outDegree: number\n * @memberof Graph/collapse-helper\n */\nfunction computeNodeDegree(nodeId, linksMatrix = {}) {\n    return Object.keys(linksMatrix).reduce(\n        (acc, source) => {\n            if (!linksMatrix[source]) {\n                return acc;\n            }\n\n            const currentNodeConnections = Object.keys(linksMatrix[source]);\n\n            return currentNodeConnections.reduce((_acc, target) => {\n                if (nodeId === source) {\n                    _acc.outDegree += linksMatrix[nodeId][target];\n                }\n\n                if (nodeId === target) {\n                    _acc.inDegree += linksMatrix[source][nodeId];\n                }\n\n                return _acc;\n            }, acc);\n        },\n        {\n            inDegree: 0,\n            outDegree: 0,\n        }\n    );\n}\n\n/**\n * Given a node id we want to calculate the list of leaf connections\n * @param {string} rootNodeId - node who's leafs we want to calculate.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Array.<Object.<string, string>>} a list of leaf connections.\n * What is a leaf connection? A leaf connection is a link between some node A and other node B\n * where A has id equal to rootNodeId and B has inDegree 1 and outDegree 0 (or outDegree 1 but the connection is with A).\n * @memberof Graph/collapse-helper\n */\nfunction getTargetLeafConnections(rootNodeId, linksMatrix = {}, { directed }) {\n    const rootConnectionsNodesIds = Object.keys(linksMatrix[rootNodeId]);\n\n    return rootConnectionsNodesIds.reduce((leafConnections, target) => {\n        if (_isLeaf(target, linksMatrix, directed)) {\n            leafConnections.push({\n                source: rootNodeId,\n                target,\n            });\n        }\n\n        return leafConnections;\n    }, []);\n}\n\n/**\n * Given a node and the connections matrix, check if node should be displayed\n * NOTE: this function is meant to be used under the `collapsible` toggle, meaning\n * that the `isNodeVisible` actually is checking visibility on collapsible graphs.\n * If you think that this code is confusing and could potentially collide (ðŸ¤ž) with #_isLeaf\n * always remember that *A leaf can, throughout time, both a visible or an invisible node!*.\n *\n * @param {string} nodeId - The id of the node to get the cardinality of\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @returns {boolean} flag that indicates whether node should or not be displayed.\n * @memberof Graph/collapse-helper\n */\nfunction isNodeVisible(nodeId, nodes, linksMatrix) {\n    if (nodes[nodeId]._orphan) {\n        return true;\n    }\n\n    const { inDegree, outDegree } = computeNodeDegree(nodeId, linksMatrix);\n\n    return inDegree > 0 || outDegree > 0;\n}\n\n/**\n * Updates d3Links by toggling given connections\n * @param {Array.<Object>} d3Links - An array containing all the d3 links.\n * @param {Array.<Object.<string, string>>} connectionMatrix - connections to toggle.\n * @returns {Array.<Object>} updated d3Links.\n * @memberof Graph/collapse-helper\n */\nfunction toggleLinksConnections(d3Links, connectionMatrix) {\n    return d3Links.map(d3Link => {\n        const { source, target } = d3Link;\n        const sourceId = getId(source);\n        const targetId = getId(target);\n        // connectionMatrix[sourceId][targetId] can be 0 or non existent\n        const connection = connectionMatrix && connectionMatrix[sourceId] && connectionMatrix[sourceId][targetId];\n        const isHidden = !connection;\n\n        return { ...d3Link, isHidden };\n    });\n}\n\n/**\n * Update matrix given array of connections to toggle.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param {Array.<Object.<string, string>>} connections - connections to toggle on matrix.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Object.<string, Object>} updated linksMatrix\n * @memberof Graph/collapse-helper\n */\nfunction toggleLinksMatrixConnections(linksMatrix, connections, { directed }) {\n    return connections.reduce(\n        (newMatrix, link) => {\n            if (!newMatrix[link.source]) {\n                newMatrix[link.source] = {};\n            }\n\n            if (!newMatrix[link.source][link.target]) {\n                newMatrix[link.source][link.target] = 0;\n            }\n\n            const newConnectionValue = newMatrix[link.source][link.target] === 0 ? 1 : 0;\n\n            newMatrix[link.source][link.target] = newConnectionValue;\n\n            if (!directed) {\n                newMatrix[link.target][link.source] = newConnectionValue;\n            }\n\n            return newMatrix;\n        },\n        { ...linksMatrix }\n    );\n}\n\nexport {\n    computeNodeDegree,\n    getTargetLeafConnections,\n    isNodeVisible,\n    toggleLinksConnections,\n    toggleLinksMatrixConnections,\n};\n"]},"metadata":{},"sourceType":"module"}