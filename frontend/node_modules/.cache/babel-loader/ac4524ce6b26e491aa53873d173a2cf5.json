{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.appendNode = () => {\n      //get link list tail and the newest added node\n      let listInfo = this.state.data.listInfo;\n      let newNode = this.getNewNode(); //find the new tail index\n\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.tail;\n      }); //create instance of the tail node\n\n      const tailNode = { ...this.state.data.nodes[tailIndex]\n      }; //assign current tail to new node\n\n      tailNode.next = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //update copy of nodes\n\n      newNodes[tailIndex] = tailNode; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      }); //update tail to point to the new tail node\n\n      listInfo.tail = newNode.nodeid; //update tail state \n\n      this.setState({\n        listInfo: listInfo\n      }); //update link state\n\n      this.state.data.links.push({\n        source: newNode.id,\n        target: tailNode.id\n      });\n    };\n\n    this.prependNode = () => {\n      //get link list head and the newest added node\n      let listInfo = this.state.data.listInfo;\n      let newNode = this.getNewNode(); //find the current head node\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.head;\n      }); //create instance of the head node\n\n      const headNode = { ...this.state.data.nodes[headIndex]\n      }; //update head positioning \n\n      newNode.next = headNode.nodeid;\n      listInfo.head = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //get index of newNode and update node array\n\n      let lastIndex = newNodes.lastIndexOf();\n      newNodes[lastIndex] = newNode; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      }); //update head state \n\n      this.setState({\n        listInfo: listInfo\n      }); //update link state\n\n      this.state.data.links.push({\n        source: newNode.id,\n        target: headNode.id\n      });\n    };\n\n    this.updateConnection = () => {\n      let removeName = this.state.removeNodeName;\n      let listInfo = this.state.data.listInfo;\n      let removeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === removeName;\n      });\n      let newNodes = [...this.state.data.nodes];\n      let removeNode = newNodes[removeIndex];\n\n      if (this.state.data.nodes.length === 0) {\n        console.log(\"Remove last node\");\n        console.log('Length', this.state.data.nodes.length);\n        listInfo.head = null;\n        listInfo.tail = null;\n      } else if (listInfo.head === removeNode.nodeid) {\n        console.log(\"Remove Head\");\n        listInfo.head = removeNode.next;\n        removeNode.next = null;\n        newNodes[removeIndex] = removeNode;\n      } else if (listInfo.tail === removeNode.nodeid) {\n        console.log(\"Remove Tail\");\n        let newTailIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let newTailNode = newNodes[newTailIndex];\n        listInfo.tail = newTailNode.nodeid;\n        newTailNode.next = null;\n        newNodes[newTailIndex] = newTailNode;\n      } else {\n        console.log(\"Remove middle node\");\n        let prevIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let prevNode = newNodes[prevIndex];\n        prevNode.next = removeNode.next;\n        removeNode.next = null;\n        newNodes[prevIndex] = prevNode;\n        newNodes[removeIndex] = removeNode;\n      }\n\n      newNodes.splice(removeIndex, removeIndex + 1);\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      this.setState({\n        listInfo: listInfo\n      });\n      let links = this.state.data.links;\n      let removeLinkIndex = links.findIndex(link => {\n        return link.source === removeNode.id;\n      });\n      links.splice(removeLinkIndex, removeLinkIndex + 1);\n      this.setState({ ...(this.state.data.links = links)\n      });\n    };\n\n    this.updateListColor = index => {\n      //get index of head and tail\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.head;\n      });\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.tail;\n      }); //copy of array\n\n      let newNodes = [...this.state.data.nodes]; //set all nodes to original color\n\n      newNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n      }); //update new head or tail with color\n\n      newNodes[headIndex].color = 'blue';\n      newNodes[tailIndex].color = 'red'; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n    };\n\n    this.getCount = () => {\n      let curCount = this.state.data.nodes.length;\n      curCount++;\n      return curCount;\n    };\n\n    this.getNewNode = () => {\n      let length = this.state.data.nodes.length;\n      return this.state.data.nodes[length - 1];\n    };\n\n    this.onClickAddNode = event => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`; //create unique node id\n\n        let newid = this.getCount(); //add node id \n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\"\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      if (event === 'app') {\n        this.appendNode();\n      } else if (event === 'pre') {\n        this.prependNode();\n      } //call to update head and tail color \n\n\n      let index = this.state.data.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log('nodes', this.state.data.nodes);\n      console.log('listInfo', this.state.data.listInfo);\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.updateConnection();\n        let index = this.state.data.listInfo;\n        this.updateListColor(index); //test\n\n        console.log('nodes', this.state.data.nodes);\n        console.log('listInfo', this.state.data.listInfo);\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n\n      console.log('Before pass list', this.state.data.listInfo);\n      console.log('links', this.state.data.links);\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n        var found = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source].push(target);\n            found = true;\n          }\n        }\n\n        if (!found) {\n          var newNeighbor = {};\n          newNeighbor[source] = [target];\n          this.state.algoData.neighbors.push(newNeighbor);\n        }\n\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        keyNode: this.state.algoData.keyNode,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addKeyNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        keyNode: event.target.value,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"search\") {\n        this.searchList();\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {}\n    };\n\n    this.searchList = () => {\n      // Loops through nodes to see if the key node actually exists\n      var keyIndex = null; // initialize algoData stack to start as empty\n\n      this.state.algoData.stack = [];\n\n      for (let i = 0; i < this.data.nodes.length; i++) {\n        // add the traversed node to the stack\n        this.state.algoData.stack.push(this.data.nodes[i]); // set the index equal to i if the key is found in the list\n\n        if (this.algoData.keyNode in this.data.nodes[i].id) {\n          keyIndex = i;\n          break;\n        }\n      } // add a setTimeout for the rendering of the algorithm\n\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    this.eventKeyHandler = key => {\n      let tabKey = this.state.key;\n      tabKey = key;\n      this.setState({\n        key: tabKey\n      });\n    };\n\n    const _data = {\n      //nodeid gives each node a unique index\n      //next is our pointer \n      nodes: [{\n        id: \"head\",\n        nodeid: 0,\n        next: \"Michael\",\n        color: \"black\"\n      }, {\n        id: \"Michael\",\n        nodeid: 1,\n        next: null,\n        color: \"\"\n      }],\n      links: [//{ source: \"Michael\", target: \"Jan\" },\n      {\n        source: \"head\",\n        target: \"Michael\"\n      }],\n      //private info for linked list, head & tail refers to nodeid attribute of a node \n      listInfo: {\n        head: 0,\n        tail: 1\n      }\n    };\n    const neighbors = [{\n      Michael: [(\"Jan\", 10), \"Holly\", \"Ryan\", \"Jim\", \"Toby\"]\n    }, {\n      Jim: [\"Pam\", \"Karen\", \"Dwight\"]\n    }, {\n      Pam: [\"Roy\"]\n    }, {\n      Dwight: [\"Angela\", \"Andy\"]\n    }, {\n      Andy: [\"Erin\"]\n    }, {\n      Ryan: [\"Kelly\"]\n    }, {\n      Angela: [\"Oscar\", \"Kevin\", \"Senator\"]\n    }, {\n      Oscar: [\"Senator\", \"Phyllis\"]\n    }, {\n      Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"]\n    }]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n    const _algoData = {\n      startNode: _data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      preNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: '' //state for Algorithm tabs \n\n    }; //this.onClickAddNode = this.onClickAddNode.bind(this)\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  //LINK LIST METHODS\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map(item => {\n      return React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765\n        },\n        __self: this\n      }, item);\n    });\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 771\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tLog fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 772\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"list-group list-group-flush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773\n        },\n        __self: this\n      }, neighborItems)), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776\n        },\n        __self: this\n      }, \"Linked List\"), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 787\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 796\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 891\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 905\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 906\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter starting node\",\n        onChange: this._addStartNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919\n        },\n        __self: this\n      }, \" Key Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter Key node\",\n        onChange: this._addKeyNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        className: \"dropdown pt-2\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 937\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        onSelect: () => this.state.algoData.algorithm = \"search\",\n        onSelect: event => this.eventKeyHandler(event) //Tab selector\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 938\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"2\",\n        onSelect: () => this.state.algoData.algorithm = \"bfs\",\n        onSelect: event => this.eventKeyHandler(2) //Tab Selector\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 945\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        onSelect: () => this.state.algoData.algorithm = \"djk\",\n        onSelect: event => this.eventKeyHandler(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 952\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm() //Should call selected algorithm\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 962\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 974\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1005\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1006\n        },\n        __self: this\n      }, \" Append node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1007\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickAddNode('app'),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1018\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029\n        },\n        __self: this\n      }, \" Prepend node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1030\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1031\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickAddNode('pre'),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1032\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1041\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1052\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickRemoveNode(),\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1055\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1061\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1076\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1086\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1087\n        },\n        __self: this\n      })))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1100\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx"],"names":["React","Graph","ReactTooltip","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","appendNode","listInfo","state","data","newNode","getNewNode","tailIndex","nodes","findIndex","node","nodeid","tail","tailNode","next","newNodes","setState","links","push","source","id","target","prependNode","headIndex","head","headNode","lastIndex","lastIndexOf","updateConnection","removeName","removeNodeName","removeIndex","removeNode","length","console","log","newTailIndex","newTailNode","prevIndex","prevNode","splice","removeLinkIndex","link","updateListColor","index","forEach","color","nodeColor","getCount","curCount","onClickAddNode","event","addNodeName","addNodePlaceholder","newid","onClickRemoveNode","removeNodePlaceholder","filter","l","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","i","addLinkPlaceholder","j","found","algoData","neighbors","newNeighbor","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","keyNode","algorithm","startAlgorithm","stack","_addKeyNodeHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","nodeColorHandler","linkColorHandler","linkColor","searchList","breadthFirstSearch","keyIndex","rotateHandler","setTimeout","highlightHandler","resetState","counter","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","strokeColor","then","nodeIndex","origNode","foundTarget","eventKeyHandler","tabKey","Michael","Jim","Pam","Dwight","Andy","Ryan","Angela","Oscar","Phyllis","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","symbolType","highlightColor","queue","generatedConfig","nodeIdToBeRemoved","preNodeName","preNodePlaceholder","render","neighborItems","map","item","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button} from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      //nodeid gives each node a unique index\n      //next is our pointer \n      nodes: [\n        { id: \"head\", nodeid: 0, next: \"Michael\", color: \"black\"},\n        { id: \"Michael\", nodeid: 1, next: null, color: \"\"},\n      ],\n      links: [\n        //{ source: \"Michael\", target: \"Jan\" },\n        { source: \"head\", target: \"Michael\"},\n      ],\n      //private info for linked list, head & tail refers to nodeid attribute of a node \n      listInfo: {head: 0, tail: 1},\n    };\n\n    const neighbors = [\n      { Michael: [(\"Jan\", 10), \"Holly\", \"Ryan\", \"Jim\", \"Toby\"] },\n      { Jim: [\"Pam\", \"Karen\", \"Dwight\"] },\n      { Pam: [\"Roy\"] },\n      { Dwight: [\"Angela\", \"Andy\"] },\n      { Andy: [\"Erin\"] },\n      { Ryan: [\"Kelly\"] },\n      { Angela: [\"Oscar\", \"Kevin\", \"Senator\"] },\n      { Oscar: [\"Senator\", \"Phyllis\"] },\n      { Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"] },\n    ];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n      },\n    };\n\n    const algoData = {\n      startNode: data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      preNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: '' //state for Algorithm tabs \n    };\n\n    //this.onClickAddNode = this.onClickAddNode.bind(this)\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  //LINK LIST METHODS\n\n  appendNode = () => {\n    //get link list tail and the newest added node\n    let listInfo = this.state.data.listInfo\n    let newNode = this.getNewNode()\n    //find the new tail index\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === listInfo.tail\n    })\n    //create instance of the tail node\n    const tailNode = {\n      ...this.state.data.nodes[tailIndex],\n    };\n    //assign current tail to new node\n    tailNode.next = newNode.nodeid\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes]\n    //update copy of nodes\n    newNodes[tailIndex] = tailNode\n    //update state of nodes\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n    //update tail to point to the new tail node\n    listInfo.tail = newNode.nodeid\n    //update tail state \n    this.setState({\n      listInfo : listInfo\n    })\n    //update link state\n    this.state.data.links.push({\n      source: newNode.id,\n      target: tailNode.id,\n    });\n  }\n\n  prependNode = () => {\n    //get link list head and the newest added node\n    let listInfo = this.state.data.listInfo\n    let newNode = this.getNewNode()\n    //find the current head node\n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === listInfo.head\n    })\n     //create instance of the head node\n    const headNode = {\n      ...this.state.data.nodes[headIndex],\n    };\n    //update head positioning \n    newNode.next = headNode.nodeid\n    listInfo.head = newNode.nodeid\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes]\n    //get index of newNode and update node array\n    let lastIndex = newNodes.lastIndexOf()\n    newNodes[lastIndex] = newNode\n    //update state of nodes\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n     //update head state \n    this.setState({\n      listInfo : listInfo\n    })\n    //update link state\n    this.state.data.links.push({\n      source: newNode.id,\n      target: headNode.id,\n    });\n  }\n\n  //remove node still in the works\n  updateConnection = () => {\n    let removeName = this.state.removeNodeName\n    let listInfo = this.state.data.listInfo\n\n    let removeIndex = this.state.data.nodes.findIndex( node => {\n      return node.id === removeName\n    })\n\n    let newNodes = [...this.state.data.nodes]\n\n    let removeNode = newNodes[removeIndex]\n\n    if (this.state.data.nodes.length === 0) {\n      console.log(\"Remove last node\")\n      console.log('Length', this.state.data.nodes.length)\n      listInfo.head = null\n      listInfo.tail = null\n    }\n    else if (listInfo.head === removeNode.nodeid) {\n      console.log(\"Remove Head\")\n      listInfo.head = removeNode.next\n      removeNode.next = null\n      newNodes[removeIndex] = removeNode\n    }\n    else if (listInfo.tail === removeNode.nodeid) {\n      console.log(\"Remove Tail\")\n      let newTailIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n      let newTailNode = newNodes[newTailIndex]\n      listInfo.tail = newTailNode.nodeid\n      newTailNode.next = null\n      newNodes[newTailIndex] = newTailNode\n    } \n    else {\n      console.log(\"Remove middle node\")\n      let prevIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n      let prevNode = newNodes[prevIndex]\n      prevNode.next = removeNode.next\n      removeNode.next = null\n      newNodes[prevIndex] = prevNode\n      newNodes[removeIndex] = removeNode\n    }\n\n    newNodes.splice(removeIndex, removeIndex + 1)\n\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n\n    this.setState({\n      listInfo : listInfo\n    })\n\n    let links = this.state.data.links\n    let removeLinkIndex = links.findIndex(link => {\n      return link.source === removeNode.id\n    })\n\n    links.splice(removeLinkIndex, removeLinkIndex + 1)\n\n    this.setState({\n      ...this.state.data.links = links\n    })\n\n  }\n  //set head and tail colors\n  updateListColor = (index) => {\n    //get index of head and tail\n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.head\n    })\n\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.tail\n    })\n    //copy of array\n    let newNodes = [...this.state.data.nodes]\n    //set all nodes to original color\n    newNodes.forEach((node) => {\n      node.color = this.state.nodeColor;\n    });\n    //update new head or tail with color\n    newNodes[headIndex].color = 'blue'\n    newNodes[tailIndex].color = 'red'\n    //update state of nodes\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n  }\n\n  //used for assigning new nodes with a unique node id\n  getCount = () => {\n    let curCount = this.state.data.nodes.length\n    curCount++\n    return curCount\n  }\n  //retrieve new node \n  getNewNode = () => {\n    let length = this.state.data.nodes.length\n    return this.state.data.nodes[length-1]\n  }\n  //appends or prepends node\n  onClickAddNode = (event) => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n      //create unique node id\n      let newid = this.getCount()\n      //add node id \n      this.state.data.nodes.push({ id: newNode, nodeid: newid, next: null, color: \"\"});\n      \n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    if (event === 'app') {\n      this.appendNode()\n    }\n    else if (event === 'pre') {\n      this.prependNode()\n    }\n    //call to update head and tail color \n    let index = this.state.data.listInfo\n    this.updateListColor(index)\n\n    //console test -> please use for debug\n    console.log('nodes', this.state.data.nodes)\n    console.log('listInfo', this.state.data.listInfo)\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    \n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.updateConnection()\n\n      let index = this.state.data.listInfo\n      this.updateListColor(index)\n\n       //test\n      console.log('nodes', this.state.data.nodes)\n      console.log('listInfo', this.state.data.listInfo)\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\",\n      });\n    }\n    console.log('Before pass list', this.state.data.listInfo)\n    console.log('links', this.state.data.links)\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\",\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target,\n      });\n\n      var found = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][source].push(target);\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var newNeighbor = {};\n        newNeighbor[source] = [target];\n        this.state.algoData.neighbors.push(newNeighbor);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            (l) => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      keyNode: this.state.algoData.keyNode,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addKeyNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      keyNode: event.target.value,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"search\") {\n      this.searchList();\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n    }\n  };\n\n  searchList = () => {\n    // Loops through nodes to see if the key node actually exists\n    var keyIndex = null;\n    // initialize algoData stack to start as empty\n    this.state.algoData.stack = [];\n    for(let i = 0; i < this.data.nodes.length; i++) {\n      // add the traversed node to the stack\n      this.state.algoData.stack.push(this.data.nodes[i]);\n      // set the index equal to i if the key is found in the list\n      if(this.algoData.keyNode in this.data.nodes[i].id) {\n        keyIndex = i;\n        break;\n      }\n    }\n    // add a setTimeout for the rendering of the algorithm\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  }; \n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  //sets current algorithm tab\n  eventKeyHandler = (key) => {\n      let tabKey = this.state.key\n      tabKey = key\n     \n      this.setState({\n        key: tabKey\n      })\n  }\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n  \n    const neighborItems = this.state.algoData.stack.map((item) => {\n      return <li class=\"list-group-item\">{item}</li>;\n\n    });\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"tLog fixed-bottom\">\n          <ul class=\"list-group list-group-flush\">{neighborItems}</ul>\n        </div>\n\n        <h3>Linked List</h3>\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                />\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"weight\"\n                  label=\"Weighted\"\n                />\n              </div>\n\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"sNode\"\n                    type=\"text\"\n                    name=\"startNode\"\n                    placeholder=\"Enter starting node\"\n                    onChange={this._addStartNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <h5 class=\"font-weight-light h6\"> Key Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"tNode\"\n                    type=\"text\"\n                    name=\"tarhetNode\"\n                    placeholder=\"Enter Key node\"\n                    onChange={this._addKeyNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <Dropdown className=\"dropdown pt-2\" drop=\"right\">\n                  <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-two\">\n                    Algorithm\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu id=\"algoSelection\">\n                    <Dropdown.Item\n                      eventKey=\"1\"\n                      onSelect={() => (this.state.algoData.algorithm = \"search\")}\n                      onSelect={(event) => this.eventKeyHandler(event)} //Tab selector\n                    >\n                      Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"2\"\n                      onSelect={() => (this.state.algoData.algorithm = \"bfs\")}\n                      onSelect={(event) => this.eventKeyHandler(2)} //Tab Selector\n                    >\n                      Breadth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"3\"\n                      onSelect={() => (this.state.algoData.algorithm = \"djk\")}\n                      onSelect={(event) => this.eventKeyHandler(event)}\n                    >\n                      Dijkstra's\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()} //Should call selected algorithm\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Append node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={() => this.onClickAddNode('app')}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light pt-2\"> Prepend node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={ () => this.onClickAddNode('pre')}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                      <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={() => this.onClickRemoveNode()}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> - </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Add link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={this._addLinkHandleChange}\n                onKeyPress={this._handleLinkKeyEnter}\n              />\n\n              <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"removeLink\"\n                placeholder={this.state.removeLinkPlaceholder}\n                value={this.state.removeLink}\n                onChange={this._removeLinkHandleChange}\n                onKeyPress={this._handleRemoveLinkKeyEnter}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n\n        </div>\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}