{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/Graph/node/Node.jsx\";\nimport React from \"react\";\nimport CONST from \"./node.const\";\nimport nodeHelper from \"./node.helper\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n/**\n * Node component is responsible for encapsulating node render.\n * @example\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node', nodeId);\n * };\n *\n * const onRightClickNode = function(nodeId) {\n *      window.alert('Right clicked node', nodeId);\n * }\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert('Mouse over node', nodeId);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert('Mouse out node', nodeId);\n * };\n *\n * <Node\n *     id='nodeId'\n *     cx=22\n *     cy=22\n *     fill='green'\n *     fontSize=10\n *     fontColor='black'\n *     fontWeight='normal'\n *     dx=90\n *     label='label text'\n *     opacity=1\n *     renderLabel=true\n *     size=200\n *     stroke='none'\n *     strokeWidth=1.5\n *     svg='assets/my-svg.svg'\n *     type='square'\n *     viewGenerator=(node) => <CustomComponent node={node} />\n *     className='node'\n *     onClickNode={onClickNode}\n *     onRightClickNode={onRightClickNode}\n *     onMouseOverNode={onMouseOverNode}\n *     onMouseOutNode={onMouseOutNode} />\n */\n\nexport default class Node extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleOnClickNode = () => this.props.onClickNode && this.props.onClickNode(this.props.id);\n\n    this.handleOnRightClickNode = event => this.props.onRightClickNode && this.props.onRightClickNode(event, this.props.id);\n\n    this.handleOnMouseOverNode = () => this.props.onMouseOverNode && this.props.onMouseOverNode(this.props.id);\n\n    this.handleOnMouseOutNode = () => this.props.onMouseOut && this.props.onMouseOut(this.props.id);\n  }\n\n  render() {\n    const nodeProps = {\n      cursor: this.props.cursor,\n      onClick: this.handleOnClickNode,\n      onContextMenu: this.handleOnRightClickNode,\n      onMouseOut: this.handleOnMouseOutNode,\n      onMouseOver: this.handleOnMouseOverNode,\n      opacity: this.props.opacity\n    };\n    const textProps = {\n      dx: 20,\n      dy: CONST.NODE_LABEL_DY,\n      fill: this.props.fontColor,\n      fontSize: this.props.fontSize,\n      fontWeight: this.props.fontWeight,\n      opacity: this.props.opacity\n    };\n    const size = this.props.size;\n    let gtx = this.props.cx,\n        gty = this.props.cy,\n        label = null,\n        node = null;\n\n    if (this.props.svg || this.props.viewGenerator) {\n      const height = size / 10;\n      const width = size / 10;\n      const tx = width / 2;\n      const ty = height / 2;\n      const transform = `translate(${tx},${ty})`;\n      label = React.createElement(\"text\", Object.assign({}, textProps, {\n        transform: transform,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), this.props.label); // By default, if a view generator is set, it takes precedence over any svg image url\n\n      if (this.props.viewGenerator && !this.props.overrideGlobalViewGenerator) {\n        node = React.createElement(\"svg\", Object.assign({}, nodeProps, {\n          width: width,\n          height: height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }), React.createElement(\"foreignObject\", {\n          x: \"0\",\n          y: \"0\",\n          width: \"100%\",\n          height: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          style: {\n            height,\n            width,\n            backgroundColor: \"transparent\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, this.props.viewGenerator(this.props))));\n      } else {\n        node = React.createElement(\"image\", Object.assign({}, nodeProps, {\n          href: this.props.svg,\n          width: width,\n          height: height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }));\n      } // svg offset transform regarding svg width/height\n\n\n      gtx -= tx;\n      gty -= ty;\n    } else {\n      nodeProps.d = nodeHelper.buildSvgSymbol(size, this.props.type);\n      nodeProps.fill = this.props.fill;\n      nodeProps.stroke = this.props.stroke;\n      nodeProps.strokeWidth = this.props.strokeWidth;\n      label = React.createElement(\"text\", Object.assign({}, textProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), this.props.label);\n      node = React.createElement(\"path\", Object.assign({}, nodeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }));\n    }\n\n    const gProps = {\n      className: this.props.className,\n      cx: this.props.cx,\n      cy: this.props.cy,\n      id: this.props.id,\n      transform: `translate(${gtx},${gty})`\n    };\n    return React.createElement(\"g\", Object.assign({}, gProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), node, this.props.renderLabel && label);\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/Graph/node/Node.jsx"],"names":["React","CONST","nodeHelper","ContextMenu","MenuItem","ContextMenuTrigger","Node","Component","handleOnClickNode","props","onClickNode","id","handleOnRightClickNode","event","onRightClickNode","handleOnMouseOverNode","onMouseOverNode","handleOnMouseOutNode","onMouseOut","render","nodeProps","cursor","onClick","onContextMenu","onMouseOver","opacity","textProps","dx","dy","NODE_LABEL_DY","fill","fontColor","fontSize","fontWeight","size","gtx","cx","gty","cy","label","node","svg","viewGenerator","height","width","tx","ty","transform","overrideGlobalViewGenerator","backgroundColor","d","buildSvgSymbol","type","stroke","strokeWidth","gProps","className","renderLabel"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport CONST from \"./node.const\";\n\nimport nodeHelper from \"./node.helper\";\n\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n/**\n * Node component is responsible for encapsulating node render.\n * @example\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node', nodeId);\n * };\n *\n * const onRightClickNode = function(nodeId) {\n *      window.alert('Right clicked node', nodeId);\n * }\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert('Mouse over node', nodeId);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert('Mouse out node', nodeId);\n * };\n *\n * <Node\n *     id='nodeId'\n *     cx=22\n *     cy=22\n *     fill='green'\n *     fontSize=10\n *     fontColor='black'\n *     fontWeight='normal'\n *     dx=90\n *     label='label text'\n *     opacity=1\n *     renderLabel=true\n *     size=200\n *     stroke='none'\n *     strokeWidth=1.5\n *     svg='assets/my-svg.svg'\n *     type='square'\n *     viewGenerator=(node) => <CustomComponent node={node} />\n *     className='node'\n *     onClickNode={onClickNode}\n *     onRightClickNode={onRightClickNode}\n *     onMouseOverNode={onMouseOverNode}\n *     onMouseOutNode={onMouseOutNode} />\n */\nexport default class Node extends React.Component {\n  /**\n   * Handle click on the node.\n   * @returns {undefined}\n   */\n  handleOnClickNode = () =>\n    this.props.onClickNode && this.props.onClickNode(this.props.id);\n\n  /**\n   * Handle right click on the node.\n   * @param {Object} event - native event.\n   * @returns {undefined}\n   */\n  handleOnRightClickNode = (event) =>\n    this.props.onRightClickNode &&\n    this.props.onRightClickNode(event, this.props.id);\n\n  /**\n   * Handle mouse over node event.\n   * @returns {undefined}\n   */\n  handleOnMouseOverNode = () =>\n    this.props.onMouseOverNode && this.props.onMouseOverNode(this.props.id);\n\n  /**\n   * Handle mouse out node event.\n   * @returns {undefined}\n   */\n  handleOnMouseOutNode = () =>\n    this.props.onMouseOut && this.props.onMouseOut(this.props.id);\n\n  render() {\n    const nodeProps = {\n      cursor: this.props.cursor,\n      onClick: this.handleOnClickNode,\n      onContextMenu: this.handleOnRightClickNode,\n      onMouseOut: this.handleOnMouseOutNode,\n      onMouseOver: this.handleOnMouseOverNode,\n      opacity: this.props.opacity,\n    };\n\n    const textProps = {\n      dx: 20,\n      dy: CONST.NODE_LABEL_DY,\n      fill: this.props.fontColor,\n      fontSize: this.props.fontSize,\n      fontWeight: this.props.fontWeight,\n      opacity: this.props.opacity,\n    };\n\n    const size = this.props.size;\n\n    let gtx = this.props.cx,\n      gty = this.props.cy,\n      label = null,\n      node = null;\n\n    if (this.props.svg || this.props.viewGenerator) {\n      const height = size / 10;\n      const width = size / 10;\n      const tx = width / 2;\n      const ty = height / 2;\n      const transform = `translate(${tx},${ty})`;\n\n      label = (\n        <text {...textProps} transform={transform}>\n          {this.props.label}\n        </text>\n      );\n\n      // By default, if a view generator is set, it takes precedence over any svg image url\n      if (this.props.viewGenerator && !this.props.overrideGlobalViewGenerator) {\n        node = (\n          <svg {...nodeProps} width={width} height={height}>\n            <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n              <section\n                style={{ height, width, backgroundColor: \"transparent\" }}\n              >\n                {this.props.viewGenerator(this.props)}\n              </section>\n            </foreignObject>\n          </svg>\n        );\n      } else {\n        node = (\n          <image\n            {...nodeProps}\n            href={this.props.svg}\n            width={width}\n            height={height}\n          />\n        );\n      }\n\n      // svg offset transform regarding svg width/height\n      gtx -= tx;\n      gty -= ty;\n    } else {\n      nodeProps.d = nodeHelper.buildSvgSymbol(size, this.props.type);\n      nodeProps.fill = this.props.fill;\n      nodeProps.stroke = this.props.stroke;\n      nodeProps.strokeWidth = this.props.strokeWidth;\n\n      label = <text {...textProps}>{this.props.label}</text>;\n      node = <path {...nodeProps} />;\n    }\n\n    const gProps = {\n      className: this.props.className,\n      cx: this.props.cx,\n      cy: this.props.cy,\n      id: this.props.id,\n      transform: `translate(${gtx},${gty})`,\n    };\n\n    return (\n      <g {...gProps}>\n        {node}\n        {this.props.renderLabel && label}\n      </g>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}