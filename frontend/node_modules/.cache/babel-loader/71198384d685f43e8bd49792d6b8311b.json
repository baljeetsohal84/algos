{"ast":null,"code":"/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\nimport { MARKERS, SIZES, HIGHLIGHTED } from \"./marker.const\";\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\n\nfunction _markerKeyBuilder(size, highlighted) {\n  return `MARKER_${size}${highlighted}`;\n}\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\n\n\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return SIZES.M;\n  } else {\n    return SIZES.L;\n  }\n}\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\n\n\nfunction _computeMarkerId(highlight, transform, {\n  maxZoom\n}) {\n  const mMax = maxZoom / 4;\n  const lMax = maxZoom / 2;\n\n  const size = _getMarkerSize(transform, mMax, lMax);\n\n  const highlighted = highlight ? HIGHLIGHTED : \"\";\n\n  const markerKey = _markerKeyBuilder(size, highlighted);\n\n  return MARKERS[markerKey];\n}\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\n\n\nfunction _memoizedComputeMarkerId() {\n  let cache = {};\n  return (highlight, transform, {\n    maxZoom\n  }) => {\n    const cacheKey = `${highlight};${transform};${maxZoom}`;\n\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n\n    const markerId = _computeMarkerId(highlight, transform, {\n      maxZoom\n    });\n\n    cache[cacheKey] = markerId;\n    return markerId;\n  };\n}\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\n\n\nconst getMarkerId = _memoizedComputeMarkerId();\n\nexport { getMarkerId };","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/Graph/marker/marker.helper.js"],"names":["MARKERS","SIZES","HIGHLIGHTED","_markerKeyBuilder","size","highlighted","_getMarkerSize","transform","mMax","lMax","S","M","L","_computeMarkerId","highlight","maxZoom","markerKey","_memoizedComputeMarkerId","cache","cacheKey","markerId","getMarkerId"],"mappings":"AAAA;;;;;AAKA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,WAAzB,QAA4C,gBAA5C;AAEA;;;;;;;;AAOA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;AAC1C,SAAQ,UAASD,IAAK,GAAEC,WAAY,EAApC;AACH;AAED;;;;;;;;;;;AASA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC3C,MAAIF,SAAS,GAAGC,IAAhB,EAAsB;AAClB,WAAOP,KAAK,CAACS,CAAb;AACH,GAFD,MAEO,IAAIH,SAAS,IAAIC,IAAb,IAAqBD,SAAS,GAAGE,IAArC,EAA2C;AAC9C,WAAOR,KAAK,CAACU,CAAb;AACH,GAFM,MAEA;AACH,WAAOV,KAAK,CAACW,CAAb;AACH;AACJ;AAED;;;;;;;;;;;AASA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCP,SAArC,EAAgD;AAAEQ,EAAAA;AAAF,CAAhD,EAA6D;AACzD,QAAMP,IAAI,GAAGO,OAAO,GAAG,CAAvB;AACA,QAAMN,IAAI,GAAGM,OAAO,GAAG,CAAvB;;AACA,QAAMX,IAAI,GAAGE,cAAc,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,CAA3B;;AACA,QAAMJ,WAAW,GAAGS,SAAS,GAAGZ,WAAH,GAAiB,EAA9C;;AACA,QAAMc,SAAS,GAAGb,iBAAiB,CAACC,IAAD,EAAOC,WAAP,CAAnC;;AAEA,SAAOL,OAAO,CAACgB,SAAD,CAAd;AACH;AAED;;;;;;;;;;AAQA,SAASC,wBAAT,GAAoC;AAChC,MAAIC,KAAK,GAAG,EAAZ;AAEA,SAAO,CAACJ,SAAD,EAAYP,SAAZ,EAAuB;AAAEQ,IAAAA;AAAF,GAAvB,KAAuC;AAC1C,UAAMI,QAAQ,GAAI,GAAEL,SAAU,IAAGP,SAAU,IAAGQ,OAAQ,EAAtD;;AAEA,QAAIG,KAAK,CAACC,QAAD,CAAT,EAAqB;AACjB,aAAOD,KAAK,CAACC,QAAD,CAAZ;AACH;;AAED,UAAMC,QAAQ,GAAGP,gBAAgB,CAACC,SAAD,EAAYP,SAAZ,EAAuB;AAAEQ,MAAAA;AAAF,KAAvB,CAAjC;;AAEAG,IAAAA,KAAK,CAACC,QAAD,CAAL,GAAkBC,QAAlB;AAEA,WAAOA,QAAP;AACH,GAZD;AAaH;AAED;;;;;;;;;;;;;AAWA,MAAMC,WAAW,GAAGJ,wBAAwB,EAA5C;;AAEA,SAASI,WAAT","sourcesContent":["/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\nimport { MARKERS, SIZES, HIGHLIGHTED } from \"./marker.const\";\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\nfunction _markerKeyBuilder(size, highlighted) {\n    return `MARKER_${size}${highlighted}`;\n}\n\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\nfunction _getMarkerSize(transform, mMax, lMax) {\n    if (transform < mMax) {\n        return SIZES.S;\n    } else if (transform >= mMax && transform < lMax) {\n        return SIZES.M;\n    } else {\n        return SIZES.L;\n    }\n}\n\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\nfunction _computeMarkerId(highlight, transform, { maxZoom }) {\n    const mMax = maxZoom / 4;\n    const lMax = maxZoom / 2;\n    const size = _getMarkerSize(transform, mMax, lMax);\n    const highlighted = highlight ? HIGHLIGHTED : \"\";\n    const markerKey = _markerKeyBuilder(size, highlighted);\n\n    return MARKERS[markerKey];\n}\n\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\nfunction _memoizedComputeMarkerId() {\n    let cache = {};\n\n    return (highlight, transform, { maxZoom }) => {\n        const cacheKey = `${highlight};${transform};${maxZoom}`;\n\n        if (cache[cacheKey]) {\n            return cache[cacheKey];\n        }\n\n        const markerId = _computeMarkerId(highlight, transform, { maxZoom });\n\n        cache[cacheKey] = markerId;\n\n        return markerId;\n    };\n}\n\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\nconst getMarkerId = _memoizedComputeMarkerId();\n\nexport { getMarkerId };\n"]},"metadata":{},"sourceType":"module"}