{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/TreeVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport HelpButton from \"../../HelpButton/HelpButton\";\nimport \"./TreeVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the removeNode function\n  // addNodeName: a string used by the addNode function to set the new node name\n  // removeNodeName: a string used by the removeNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.addNode = () => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        var data = this.state.data;\n        let newNode, parent, side;\n        [newNode, parent, side] = this.state.addNodeName.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        }); // Do some error checking\n\n        if (newNode === \"\" || parent === \"\" || side === \"\" || side !== \"l\" && side !== \"r\" && side !== \"L\" && side !== \"R\" && side !== \"left\" && side !== \"right\" && side !== \"LEFT\" && side !== \"RIGHT\") {\n          this.setState({\n            addNodeName: \"\"\n          });\n          return;\n        }\n\n        var tree = this.state.algoData.tree;\n\n        for (let i = 0; i < data.nodes.length; i++) {\n          if (parent === data.nodes[i].id) {\n            // Determines if node is to be places on the left or right side of the parent node\n            // Then calculate the position by using a formula.\n            if ((side === \"l\" || side === \"L\" || side === \"left\" || side === \"LEFT\") && !data.nodes[i].left) {\n              let x = data.nodes[i].level === 0 ? data.nodes[i].x * (0.468 + (data.nodes[i].level + 1) * 0.05) : data.nodes[i].isRightRight ? data.nodes[i].x * (0.82 + (data.nodes[i].level + 1) * 0.04) : data.nodes[i].isRight ? data.nodes[i].x * (0.77 + (data.nodes[i].level + 1) * 0.04) : data.nodes[i].x * (0.44 + (data.nodes[i].level + 1) * 0.04);\n              let y = data.nodes[i].y * 1.5;\n              data.nodes.push({\n                id: newNode,\n                level: data.nodes[i].level + 1,\n                x: x,\n                y: y,\n                isRight: data.nodes[i].isRight,\n                isRightRight: data.nodes[i].isRightRight\n              });\n              data.nodes[i].left = true; // Put new node in tree list\n\n              for (let i = 0; i < tree.length; i++) {\n                if (parent in tree[i]) {\n                  tree[i][parent][\"left\"] = newNode;\n                  let newParent = {};\n                  newParent[newNode] = {};\n                  tree.push(newParent);\n                }\n              }\n            } else if ((side === \"r\" || side === \"R\" || side === \"right\" || side === \"RIGHT\") && !data.nodes[i].right) {\n              let x = data.nodes[i].level === 0 ? data.nodes[i].x * (1.47 + (data.nodes[i].level + 1) * 0.05) : data.nodes[i].isRightRight ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04) : data.nodes[i].isRight ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04) : data.nodes[i].x * (1.6 - (data.nodes[i].level + 1) * 0.04);\n              let y = data.nodes[i].y * 1.5;\n              let isRightRight = data.nodes[i].level === 1 && data.nodes[i].isRight ? true : data.nodes[i].isRightRight ? true : false;\n              data.nodes.push({\n                id: newNode,\n                level: data.nodes[i].level + 1,\n                x: x,\n                y: y,\n                isRight: true,\n                isRightRight: isRightRight\n              });\n              data.nodes[i].right = true; // Put new node in tree list\n\n              for (let i = 0; i < tree.length; i++) {\n                if (parent in tree[i]) {\n                  tree[i][parent][\"right\"] = newNode;\n                  let newParent = {};\n                  newParent[newNode] = {};\n                  tree.push(newParent);\n                }\n              }\n            } // Form link between parent and node\n\n\n            data.links.push({\n              source: parent,\n              target: newNode\n            });\n            var algoData = this.state.algoData;\n            algoData.tree = tree; // Set state data into the current data object we have\n\n            this.setState({\n              data: data,\n              algoData: algoData\n            });\n            break;\n          }\n        }\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter as: name\"\n      });\n    };\n\n    this.removeNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes.length === 1) {\n        this.setState({\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Cannot remove last node!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n        var currNode = this.state.removeNodeName;\n        var tree = this.state.algoData.tree;\n        var loop = true;\n        var nodes;\n        var links; // Stack that contains the previous node and the side of which the node is removed\n\n        var stack = [];\n        var originalNode;\n\n        while (loop) {\n          for (let i = 0; i < tree.length; i++) {\n            if (currNode in tree[i]) {\n              // Case #1\n              // When node has no children\n              if (!(\"left\" in tree[i][currNode]) && !(\"right\" in tree[i][currNode])) {\n                nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n                links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName); // Remove node from tree list\n\n                for (let j = 0; j < tree.length; j++) {\n                  if (currNode in tree[j]) {\n                    delete tree[j][currNode];\n                  }\n                }\n\n                if (stack.length === 0) loop = false;else {\n                  while (stack.length !== 0) {\n                    const [prevNode, side] = stack.pop(); // Remove node from tree lsit\n\n                    for (let k = 0; k < tree.length; k++) {\n                      if (prevNode in tree[k]) {\n                        let sideNode = tree[k][prevNode][side]; // Replace this node with the node we just deleted\n\n                        if (prevNode !== sideNode) {\n                          delete tree[k][prevNode][side];\n                          Object.defineProperty(tree[k], sideNode, Object.getOwnPropertyDescriptor(tree, prevNode));\n                          delete tree[k][prevNode];\n                        } // Set originalNode to this node.\n\n                      }\n                    }\n                  }\n                }\n                break;\n              } else if (!(\"left\" in tree[i][currNode]) || !(\"right\" in tree[i][currNode])) {\n                if (\"right\" in tree[i][currNode]) {\n                  stack.push([currNode, \"right\"]);\n                  currNode = tree[i][currNode][\"right\"];\n                }\n\n                if (\"left\" in tree[i][currNode]) {\n                  stack.push([currNode, \"left\"]);\n                  currNode = tree[i][currNode][\"left\"];\n                }\n              }\n            }\n          }\n        }\n\n        const data = {\n          nodes,\n          links\n        };\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter as: name\"\n        });\n      }\n    };\n\n    this.checkChildren = node => {};\n\n    this.addLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target, weight;\n        [source, target, weight] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        weight = parseInt(weight);\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists || !weight) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target, weight\"\n            });\n            return;\n          }\n        } // Push to the links list in the data state\n\n\n        this.state.data.links.push({\n          source: source,\n          target: target,\n          label: weight\n        });\n        var found_in_undirected = false;\n        var found_in_directed = false;\n        var target_weight = [target, weight];\n        var source_weight = [source, weight];\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          let already_exists = false; // Add both source and target to each other's neighbors list because the graph is undirected\n\n          if (source in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_undirected = true;\n          }\n\n          already_exists = false;\n\n          if (target in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n              if (source === undirected_neighbors[i][target][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][target].push(source_weight);\n            }\n\n            found_in_undirected = true;\n          }\n        } // Push to neighbors list if a node already\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          let already_exists = false; // Add only the target node to the source neighbors list because it is a directed graph\n\n          if (source in directed_neighbors[i]) {\n            for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              directed_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_directed = true;\n          }\n        } // Else push a new list containing this new node as a neighbor\n\n\n        if (!found_in_undirected) {\n          let sourceNeighbor = {};\n          let targetNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          targetNeighbor[source] = source_weight;\n          undirected_neighbors.push(sourceNeighbor);\n          undirected_neighbors.push(targetNeighbor);\n        }\n\n        if (!found_in_directed) {\n          let sourceNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          directed_neighbors.push(sourceNeighbor);\n        }\n\n        var algoData = this.state.algoData;\n        algoData.undirected_neighbors = undirected_neighbors;\n        algoData.directed_neighbors = directed_neighbors;\n        this.setState({\n          algoData: algoData\n        });\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\"\n        });\n      }\n    };\n\n    this.removeLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Remove links for both the source and target in the undirected neighbors list\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          if (source in undirected_neighbors[i]) {\n            undirected_neighbors[i][source].filter(l => l[0] !== target);\n          }\n\n          if (target in undirected_neighbors[i]) {\n            undirected_neighbors[i][target].filter(l => l[0] !== source);\n          }\n        } // Remove links for the directed neighbors list\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          if (source in directed_neighbors[i]) {\n            directed_neighbors[i][source].filter(l => l[0] !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        endNode: this.state.algoData.endNode,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addEndNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        endNode: event.target.value,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.addNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.removeNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.addLink();\n      }\n    };\n\n    this._handleremoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.removeLink();\n      }\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkSizeHandler = linkSize => {\n      const config = this.state.config;\n      config.link.strokeWidth = linkSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"preOrder\") {\n        this.state.algoData.showList = true;\n        this.preOrder();\n      } else if (this.state.algoData.algorithm === \"inOrder\") {\n        this.state.algoData.showList = true;\n        this.inOrder();\n      } else if (this.state.algoData.algorithm === \"postOrder\") {\n        this.state.algoData.showList = true;\n        this.postOrder();\n      } else if (this.state.algoData.algorithm === \"levelOrder\") {\n        this.state.algoData.showList = true;\n        this.levelOrder();\n      }\n    };\n\n    this.preOrder = () => {\n      var tree = this.state.algoData.tree;\n      var traversalList = this.state.algoData.traversalList;\n      var counter = 0;\n      var stack = [];\n      stack.push(this.state.algoData.root); // Loop while the stack is not empty\n\n      while (stack !== undefined && stack.length !== 0) {\n        // Pops the tail element of the stack\n        let node = stack.pop(); // Gets the traversalList so we can push the current node values\n        // and have it display to the user as a line indicating the order\n        // of the traversal.\n        // Call the highlight handler function\n\n        setTimeout(() => {\n          traversalList.push(node);\n          this.highlightHandler(node, counter);\n        }, 1000 * (counter + 1));\n        this.setState({ ...(this.state.algoData.traversalList = traversalList)\n        }); // Iterates through the tree list to check if any of them equal to the node\n        // If it is, check if right node exists, if so, push to the stack.\n        // Also check if left node exists, if so, push to the stack.\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"right\" in tree[i][node]) {\n              stack.push(tree[i][node][\"right\"]);\n            }\n\n            if (\"left\" in tree[i][node]) {\n              stack.push(tree[i][node][\"left\"]);\n            }\n          }\n        }\n\n        counter++;\n      } // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n\n\n      this.resetState(counter + 3);\n      setTimeout(() => {\n        this.setState({ ...(this.state.algoData.showList = false),\n          ...(this.state.algoData.traversalList = [])\n        });\n      }, 1000 * (counter + 5));\n    };\n\n    this.inOrder = () => {\n      var tree = this.state.algoData.tree;\n      var traversalList = this.state.algoData.traversalList;\n      var counter = 0;\n      var node = this.state.algoData.root;\n      var stack = []; // Loop while the stack is not empty\n\n      while (node !== undefined && node.slice(0, -1) != \"\" || stack !== undefined && stack.length !== 0) {\n        // Reach the left most node of the curr node\n        while (node !== undefined && node.slice(0, -1) != \"\") {\n          for (let i = 0; i < tree.length; i++) {\n            if (node in tree[i]) {\n              stack.push(node);\n\n              if (\"left\" in tree[i][node]) {\n                node = tree[i][node][\"left\"];\n              } else {\n                node = \"\";\n              }\n\n              break;\n            } else if (i === tree.length - 1) {\n              node = \"\";\n              break;\n            }\n          }\n        } // Current should be NULL by this point\n\n\n        let curr = stack.pop(); // Call the highlight handler function\n\n        setTimeout(() => {\n          traversalList.push(curr);\n          this.highlightHandler(curr, counter);\n        }, 1000 * (counter + 1)); // Set the traversalList of the class state\n\n        this.setState({ ...(this.state.algoData.traversalList = traversalList)\n        }); // Set node to curr\n\n        node = curr; // Check if the node has a right child, if it does, set node to it, else set it to undefined\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"right\" in tree[i][node]) {\n              node = tree[i][node][\"right\"];\n            } else {\n              node = \"\";\n            }\n\n            break;\n          } else if (i === tree.length - 1) {\n            node = \"\";\n            break;\n          }\n        }\n\n        counter++;\n      } // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n\n\n      this.resetState(counter + 1);\n      setTimeout(() => {\n        this.setState({ ...(this.state.algoData.showList = false),\n          ...(this.state.algoData.traversalList = [])\n        });\n      }, 1000 * (counter + 5));\n    };\n\n    this.postOrder = () => {\n      var tree = this.state.algoData.tree;\n      var traversalList = this.state.algoData.traversalList;\n      var counter = 0;\n      var node = this.state.algoData.root;\n      var stack = [];\n      var outputStack = [];\n      stack.push(node); // Loop while the stack is not empty\n\n      while (stack !== undefined && stack.length !== 0) {\n        // Pop a node from the stack\n        node = stack.pop();\n        outputStack.push(node); // Checks if the node has any left child, if so push that value to the stack\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"left\" in tree[i][node]) {\n              stack.push(tree[i][node][\"left\"]);\n            }\n\n            break;\n          }\n        } // Checks if the node has any right child, if so push that value to the stack\n\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"right\" in tree[i][node]) {\n              stack.push(tree[i][node][\"right\"]);\n            }\n\n            break;\n          }\n        }\n      }\n\n      while (outputStack !== undefined && outputStack.length !== 0) {\n        let out = outputStack.pop(); // Call the highlight handler function\n\n        setTimeout(() => {\n          traversalList.push(out);\n          this.highlightHandler(out, counter);\n        }, 1000 * (counter + 1));\n        this.setState({ ...(this.state.algoData.traversalList = traversalList)\n        });\n        counter++;\n      } // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n\n\n      this.resetState(counter + 1);\n      setTimeout(() => {\n        this.setState({ ...(this.state.algoData.showList = false),\n          ...(this.state.algoData.traversalList = [])\n        });\n      }, 1000 * (counter + 5));\n    };\n\n    this.levelOrder = () => {\n      var tree = this.state.algoData.tree;\n      var traversalList = this.state.algoData.traversalList;\n      var counter = 0;\n      var node = this.state.algoData.root;\n      var queue = [];\n      queue.push(node);\n\n      while (queue !== undefined && queue.length !== 0) {\n        node = queue.shift();\n        let curr = node;\n        console.log(node); // Call the highlight handler function\n\n        setTimeout(() => {\n          traversalList.push(curr);\n          this.highlightHandler(curr, counter);\n          console.log(\"HIGHLIGHTING \", curr, \"WITH COUNTER \", counter);\n        }, 1000 * (counter + 1));\n        this.setState({ ...(this.state.algoData.traversalList = traversalList)\n        }); // Checks if the node has any left child, if so push that value to the stack\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"left\" in tree[i][node]) {\n              queue.push(tree[i][node][\"left\"]);\n            }\n\n            break;\n          }\n        } // Checks if the node has any right child, if so push that value to the stack\n\n\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            if (\"right\" in tree[i][node]) {\n              queue.push(tree[i][node][\"right\"]);\n            }\n\n            break;\n          }\n        }\n\n        counter++;\n      } // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n\n\n      this.resetState(counter + 1);\n      setTimeout(() => {\n        this.setState({ ...(this.state.algoData.showList = false),\n          ...(this.state.algoData.traversalList = [])\n        });\n      }, 1000 * (counter + 5));\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      if (counter <= 2) counter = 3;\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        //store newNode updates at the proper index of the copy\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      nodes: [// default data\n      {\n        id: \"Harry\",\n        color: \"\",\n        strokeColor: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.height / 10,\n        level: 0,\n        left: false,\n        right: false,\n        isRight: false,\n        isRightRight: false\n      }],\n      links: []\n    };\n    const _tree = [{\n      Harry: {}\n    }];\n    const _traversalList = []; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      directed: true,\n      staticGraph: true,\n      //staticGraphWithDragAndDrop: true,\n      //disableLinkForce: true,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      // eslint-disable-next-line no-restricted-globals\n      height: screen.height * 0.83,\n      // eslint-disable-next-line no-restricted-globals\n      width: screen.width * 0.989,\n      node: {\n        color: \"#c34f6b\",\n        size: 600,\n        highlightStrokeColor: \"orange\",\n        strokeWidth: 3,\n        fontWeight: \"lighter\",\n        highlightFontWeight: \"lighter\"\n      },\n      link: {\n        highlightColor: \"gold\",\n        fontSize: 13,\n        renderLabel: false\n      }\n    };\n    const _algoData = {\n      root: \"Harry\",\n      target: \"\",\n      tree: _tree,\n      traversalList: _traversalList,\n      showList: false,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name, parent, L / R\",\n      removeNodePlaceholder: \"Enter as: name\",\n      key: \"\" //state for Algorithm tabs\n\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the add///NodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    // prettier-ignore\n    var listItems;\n\n    if (this.state.algoData.algorithm === \"preOrder\") {\n      listItems = \"Preorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"inOrder\") {\n      listItems = \"Inorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"postOrder\") {\n      listItems = \"Postorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"levelOrder\") {\n      listItems = \"Levelorder Traversal: \";\n    } // prettier-ignore\n\n\n    this.state.algoData.traversalList.map((e, i) => i < this.state.algoData.traversalList.length - 1 ? listItems += e + \" > \" : listItems += e);\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1131\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1140\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1141\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1142\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1143\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1157\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1158\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1159\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1174\n        },\n        __self: this\n      }, \" Link Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1175\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"linkSize\",\n        type: \"text\",\n        placeholder: \"Enter link size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkSizeHandler(document.getElementById(\"linkSize\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1176\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1190\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1191\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1192\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1209\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1217\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1218\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1226\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1235\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1236\n        },\n        __self: this\n      }, \" Algorithms: \"), React.createElement(\"div\", {\n        className: \"pt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1238\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-danger\",\n        className: \"algoSelection\",\n        onClick: () => this.state.algoData.algorithm = \"preOrder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1239\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"font-weight-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1244\n        },\n        __self: this\n      }, \"Preorder\"))), React.createElement(\"div\", {\n        className: \"pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1248\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-danger\",\n        className: \"algoSelection\",\n        onClick: () => this.state.algoData.algorithm = \"inOrder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1249\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"font-weight-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1254\n        },\n        __self: this\n      }, \"Inorder\"))), React.createElement(\"div\", {\n        className: \"pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1258\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-danger\",\n        className: \"algoSelection\",\n        onClick: () => this.state.algoData.algorithm = \"postOrder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1259\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"font-weight-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1266\n        },\n        __self: this\n      }, \"Postorder\"))), React.createElement(\"div\", {\n        className: \"pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1270\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-danger\",\n        className: \"algoSelection\",\n        onClick: () => this.state.algoData.algorithm = \"levelOrder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1271\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"font-weight-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1278\n        },\n        __self: this\n      }, \"Levelorder\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm() //Should call selected algorithm\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1282\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1294\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1302\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1303\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1311\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1316\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1325\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1326\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1327\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1328\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1339\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1340\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1341\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1354\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Node List\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1355\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1362\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-list-ul\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1363\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1371\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1380\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"json-data-container mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1381\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1382\n        },\n        __self: this\n      }, this.state.algoData.tree.map((node, i) => {\n        const type = node.type;\n        const name = Object.keys(node)[0];\n        const children = [\"left\", \"right\"];\n        return React.createElement(TreeView, {\n          key: type + \"|\" + i,\n          nodeLabel: name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1389\n          },\n          __self: this\n        }, React.createElement(TreeView, {\n          key: type + \"|\" + i,\n          nodeLabel: \"Children\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1390\n          },\n          __self: this\n        }, children.map(child => {\n          if (child in node[name]) {\n            return React.createElement(\"div\", {\n              className: \"info\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1394\n              },\n              __self: this\n            }, child.charAt(0).toUpperCase() + child.slice(1), \": \", node[name][child]);\n          }\n        })));\n      }))))), React.createElement(\"div\", {\n        class: \"rightWindowHelpButton\",\n        \"data-tip\": \"Help\",\n        \"data-for\": \"helpButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1411\n        },\n        __self: this\n      }, React.createElement(HelpButton, {\n        mTitle: \"Tree\",\n        algoDesc: \"Click on the algorithm that you would like to use. After clicking, click on the start algorithm button and it wil lrun the chosen algorithm on the tree.\",\n        nLinkDesc: \"When adding a node, enter in the format of 'name of node to be added, name of parent to add node to, and the side where you want the node to be at (left, right) When removing a node, enter in the format of 'name of node to be remove'.\",\n        nodeList: \"Node List\",\n        nListDesc: \": Click on this button to view each node's left and right children.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416\n        },\n        __self: this\n      }))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1427\n        },\n        __self: this\n      }), React.createElement(ReactTooltip, {\n        id: \"helpButton\",\n        place: \"right\",\n        backgroundColor: \"#2e8b57\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1436\n        },\n        __self: this\n      }), // prettier-ignore\n      this.state.algoData.showList ? React.createElement(\"div\", {\n        className: \"listDisplay font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1448\n        },\n        __self: this\n      }, \" \", React.createElement(\"p\", {\n        class: \"traversalList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1448\n        },\n        __self: this\n      }, listItems), \" \") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1449\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/TreeVisualizer.jsx"],"names":["React","Graph","TreeView","ReactTooltip","Dropdown","Form","Button","HelpButton","GraphVisualizer","Component","constructor","props","addNode","state","addNodeName","setState","addNodePlaceholder","data","nodes","length","newNode","parent","side","split","filter","e","trim","tree","algoData","i","id","left","x","level","isRightRight","isRight","y","push","newParent","right","links","source","target","removeNode","removeNodeName","removeNodePlaceholder","currNode","loop","stack","originalNode","l","j","prevNode","pop","k","sideNode","Object","defineProperty","getOwnPropertyDescriptor","checkChildren","node","addLink","weight","parseInt","sourceExists","targetExists","addLinkPlaceholder","label","found_in_undirected","found_in_directed","target_weight","source_weight","undirected_neighbors","directed_neighbors","already_exists","sourceNeighbor","targetNeighbor","removeLink","console","log","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","endNode","algorithm","startAlgorithm","_addEndNodeHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleremoveLinkKeyEnter","nodeSizeHandler","size","config","nodeColorHandler","color","linkSizeHandler","linkSize","link","strokeWidth","linkColorHandler","linkColor","showList","preOrder","inOrder","postOrder","levelOrder","traversalList","counter","root","undefined","setTimeout","highlightHandler","resetState","slice","curr","outputStack","out","queue","shift","rotateHandler","forEach","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","nodeColor","strokeColor","then","nodeIndex","findIndex","origNode","foundTarget","screen","width","height","Harry","nodeHighlightBehavior","directed","staticGraph","rederLabel","automaticRearrangeAfterDropNode","highlightStrokeColor","fontWeight","highlightFontWeight","highlightColor","fontSize","renderLabel","generatedConfig","nodeIdToBeRemoved","render","listItems","map","document","getElementById","type","name","keys","children","child","charAt","toUpperCase","_onRightClickNode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport HelpButton from \"../../HelpButton/HelpButton\";\nimport \"./TreeVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the removeNode function\n  // addNodeName: a string used by the addNode function to set the new node name\n  // removeNodeName: a string used by the removeNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [\n        // default data\n        {\n          id: \"Harry\",\n          color: \"\",\n          strokeColor: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.height / 10,\n          level: 0,\n          left: false,\n          right: false,\n          isRight: false,\n          isRightRight: false,\n        },\n      ],\n      links: [],\n    };\n\n    const tree = [\n      {\n        Harry: {},\n      },\n    ];\n\n    const traversalList = [];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      directed: true,\n      staticGraph: true,\n      //staticGraphWithDragAndDrop: true,\n      //disableLinkForce: true,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      // eslint-disable-next-line no-restricted-globals\n      height: screen.height * 0.83,\n      // eslint-disable-next-line no-restricted-globals\n      width: screen.width * 0.989,\n      node: {\n        color: \"#c34f6b\",\n        size: 600,\n        highlightStrokeColor: \"orange\",\n        strokeWidth: 3,\n        fontWeight: \"lighter\",\n        highlightFontWeight: \"lighter\",\n      },\n      link: {\n        highlightColor: \"gold\",\n        fontSize: 13,\n        renderLabel: false,\n      },\n    };\n\n    const algoData = {\n      root: \"Harry\",\n      target: \"\",\n      tree: tree,\n      traversalList: traversalList,\n      showList: false,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name, parent, L / R\",\n      removeNodePlaceholder: \"Enter as: name\",\n      key: \"\", //state for Algorithm tabs\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the add///NodeName and addNodePlaceholder.\n\n  addNode = () => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      var data = this.state.data;\n      let newNode, parent, side;\n      [newNode, parent, side] = this.state.addNodeName\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      // Do some error checking\n      if (\n        newNode === \"\" ||\n        parent === \"\" ||\n        side === \"\" ||\n        (side !== \"l\" &&\n          side !== \"r\" &&\n          side !== \"L\" &&\n          side !== \"R\" &&\n          side !== \"left\" &&\n          side !== \"right\" &&\n          side !== \"LEFT\" &&\n          side !== \"RIGHT\")\n      ) {\n        this.setState({\n          addNodeName: \"\",\n        });\n        return;\n      }\n\n      var tree = this.state.algoData.tree;\n\n      for (let i = 0; i < data.nodes.length; i++) {\n        if (parent === data.nodes[i].id) {\n          // Determines if node is to be places on the left or right side of the parent node\n          // Then calculate the position by using a formula.\n          if (\n            (side === \"l\" ||\n              side === \"L\" ||\n              side === \"left\" ||\n              side === \"LEFT\") &&\n            !data.nodes[i].left\n          ) {\n            let x =\n              data.nodes[i].level === 0\n                ? data.nodes[i].x * (0.468 + (data.nodes[i].level + 1) * 0.05)\n                : data.nodes[i].isRightRight\n                ? data.nodes[i].x * (0.82 + (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].isRight\n                ? data.nodes[i].x * (0.77 + (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].x * (0.44 + (data.nodes[i].level + 1) * 0.04);\n            let y = data.nodes[i].y * 1.5;\n\n            data.nodes.push({\n              id: newNode,\n              level: data.nodes[i].level + 1,\n              x: x,\n              y: y,\n              isRight: data.nodes[i].isRight,\n              isRightRight: data.nodes[i].isRightRight,\n            });\n\n            data.nodes[i].left = true;\n\n            // Put new node in tree list\n            for (let i = 0; i < tree.length; i++) {\n              if (parent in tree[i]) {\n                tree[i][parent][\"left\"] = newNode;\n                let newParent = {};\n                newParent[newNode] = {};\n                tree.push(newParent);\n              }\n            }\n          } else if (\n            (side === \"r\" ||\n              side === \"R\" ||\n              side === \"right\" ||\n              side === \"RIGHT\") &&\n            !data.nodes[i].right\n          ) {\n            let x =\n              data.nodes[i].level === 0\n                ? data.nodes[i].x * (1.47 + (data.nodes[i].level + 1) * 0.05)\n                : data.nodes[i].isRightRight\n                ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].isRight\n                ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].x * (1.6 - (data.nodes[i].level + 1) * 0.04);\n            let y = data.nodes[i].y * 1.5;\n\n            let isRightRight =\n              data.nodes[i].level === 1 && data.nodes[i].isRight\n                ? true\n                : data.nodes[i].isRightRight\n                ? true\n                : false;\n\n            data.nodes.push({\n              id: newNode,\n              level: data.nodes[i].level + 1,\n              x: x,\n              y: y,\n              isRight: true,\n              isRightRight: isRightRight,\n            });\n\n            data.nodes[i].right = true;\n\n            // Put new node in tree list\n            for (let i = 0; i < tree.length; i++) {\n              if (parent in tree[i]) {\n                tree[i][parent][\"right\"] = newNode;\n                let newParent = {};\n                newParent[newNode] = {};\n                tree.push(newParent);\n              }\n            }\n          }\n\n          // Form link between parent and node\n          data.links.push({\n            source: parent,\n            target: newNode,\n          });\n\n          var algoData = this.state.algoData;\n          algoData.tree = tree;\n\n          // Set state data into the current data object we have\n          this.setState({\n            data: data,\n            algoData: algoData,\n          });\n\n          break;\n        }\n      }\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter as: name\",\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  removeNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes.length === 1) {\n      this.setState({\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Cannot remove last node!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n      var currNode = this.state.removeNodeName;\n      var tree = this.state.algoData.tree;\n      var loop = true;\n      var nodes;\n      var links;\n      // Stack that contains the previous node and the side of which the node is removed\n      var stack = [];\n      var originalNode;\n\n      while (loop) {\n        for (let i = 0; i < tree.length; i++) {\n          if (currNode in tree[i]) {\n            // Case #1\n            // When node has no children\n            if (\n              !(\"left\" in tree[i][currNode]) &&\n              !(\"right\" in tree[i][currNode])\n            ) {\n              nodes = this.state.data.nodes.filter(\n                (l) => l.id !== this.state.removeNodeName\n              );\n              links = this.state.data.links.filter(\n                (l) =>\n                  l.source !== this.state.removeNodeName &&\n                  l.target !== this.state.removeNodeName\n              );\n\n              // Remove node from tree list\n              for (let j = 0; j < tree.length; j++) {\n                if (currNode in tree[j]) {\n                  delete tree[j][currNode];\n                }\n              }\n\n              if (stack.length === 0) loop = false;\n              else {\n                while (stack.length !== 0) {\n                  const [prevNode, side] = stack.pop();\n\n                  // Remove node from tree lsit\n                  for (let k = 0; k < tree.length; k++) {\n                    if (prevNode in tree[k]) {\n                      let sideNode = tree[k][prevNode][side];\n                      // Replace this node with the node we just deleted\n                      if (prevNode !== sideNode) {\n                        delete tree[k][prevNode][side];\n                        Object.defineProperty(\n                          tree[k],\n                          sideNode,\n                          Object.getOwnPropertyDescriptor(tree, prevNode)\n                        );\n                        delete tree[k][prevNode];\n                      }\n\n                      // Set originalNode to this node.\n                    }\n                  }\n                }\n              }\n              break;\n            } else if (\n              !(\"left\" in tree[i][currNode]) ||\n              !(\"right\" in tree[i][currNode])\n            ) {\n              if (\"right\" in tree[i][currNode]) {\n                stack.push([currNode, \"right\"]);\n                currNode = tree[i][currNode][\"right\"];\n              }\n              if (\"left\" in tree[i][currNode]) {\n                stack.push([currNode, \"left\"]);\n                currNode = tree[i][currNode][\"left\"];\n              }\n            }\n          }\n        }\n      }\n\n      const data = { nodes, links };\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter as: name\",\n      });\n    }\n  };\n\n  checkChildren = (node) => {};\n\n  addLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target, weight;\n      [source, target, weight] = this.state.addLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      weight = parseInt(weight);\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists || !weight) {\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\",\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\",\n          });\n          return;\n        }\n      }\n\n      // Push to the links list in the data state\n      this.state.data.links.push({\n        source: source,\n        target: target,\n        label: weight,\n      });\n\n      var found_in_undirected = false;\n      var found_in_directed = false;\n      var target_weight = [target, weight];\n      var source_weight = [source, weight];\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        let already_exists = false;\n        // Add both source and target to each other's neighbors list because the graph is undirected\n        if (source in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][source].push(target_weight);\n          }\n          found_in_undirected = true;\n        }\n\n        already_exists = false;\n\n        if (target in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n            if (source === undirected_neighbors[i][target][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][target].push(source_weight);\n          }\n          found_in_undirected = true;\n        }\n      }\n\n      // Push to neighbors list if a node already\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        let already_exists = false;\n        // Add only the target node to the source neighbors list because it is a directed graph\n        if (source in directed_neighbors[i]) {\n          for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            directed_neighbors[i][source].push(target_weight);\n          }\n          found_in_directed = true;\n        }\n      }\n\n      // Else push a new list containing this new node as a neighbor\n      if (!found_in_undirected) {\n        let sourceNeighbor = {};\n        let targetNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n        targetNeighbor[source] = source_weight;\n\n        undirected_neighbors.push(sourceNeighbor);\n        undirected_neighbors.push(targetNeighbor);\n      }\n      if (!found_in_directed) {\n        let sourceNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n\n        directed_neighbors.push(sourceNeighbor);\n      }\n\n      var algoData = this.state.algoData;\n      algoData.undirected_neighbors = undirected_neighbors;\n      algoData.directed_neighbors = directed_neighbors;\n\n      this.setState({\n        algoData: algoData,\n      });\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target, weight\",\n      });\n    }\n  };\n\n  removeLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Remove links for both the source and target in the undirected neighbors list\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        if (source in undirected_neighbors[i]) {\n          undirected_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n        if (target in undirected_neighbors[i]) {\n          undirected_neighbors[i][target].filter((l) => l[0] !== source);\n        }\n      }\n\n      // Remove links for the directed neighbors list\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        if (source in directed_neighbors[i]) {\n          directed_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      endNode: this.state.algoData.endNode,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addEndNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      endNode: event.target.value,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the addNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.addNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the removeNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.removeNode();\n    }\n  };\n\n  _handleLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.addLink();\n    }\n  };\n\n  _handleremoveLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.removeLink();\n    }\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkSizeHandler = (linkSize) => {\n    const config = this.state.config;\n\n    config.link.strokeWidth = linkSize;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"preOrder\") {\n      this.state.algoData.showList = true;\n      this.preOrder();\n    } else if (this.state.algoData.algorithm === \"inOrder\") {\n      this.state.algoData.showList = true;\n      this.inOrder();\n    } else if (this.state.algoData.algorithm === \"postOrder\") {\n      this.state.algoData.showList = true;\n      this.postOrder();\n    } else if (this.state.algoData.algorithm === \"levelOrder\") {\n      this.state.algoData.showList = true;\n      this.levelOrder();\n    }\n  };\n\n  // Preorder function that does the preorder traversal on the tree.\n  // Uses a stack to store the strings of the node names, and uses\n  // the tree list to traverse the tree as if it was a regular tree class.\n  preOrder = () => {\n    var tree = this.state.algoData.tree;\n    var traversalList = this.state.algoData.traversalList;\n    var counter = 0;\n    var stack = [];\n    stack.push(this.state.algoData.root);\n\n    // Loop while the stack is not empty\n    while (stack !== undefined && stack.length !== 0) {\n      // Pops the tail element of the stack\n      let node = stack.pop();\n\n      // Gets the traversalList so we can push the current node values\n      // and have it display to the user as a line indicating the order\n      // of the traversal.\n\n      // Call the highlight handler function\n      setTimeout(() => {\n        traversalList.push(node);\n        this.highlightHandler(node, counter);\n      }, 1000 * (counter + 1));\n\n      this.setState({\n        ...(this.state.algoData.traversalList = traversalList),\n      });\n\n      // Iterates through the tree list to check if any of them equal to the node\n      // If it is, check if right node exists, if so, push to the stack.\n      // Also check if left node exists, if so, push to the stack.\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"right\" in tree[i][node]) {\n            stack.push(tree[i][node][\"right\"]);\n          }\n          if (\"left\" in tree[i][node]) {\n            stack.push(tree[i][node][\"left\"]);\n          }\n        }\n      }\n\n      counter++;\n    }\n\n    // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n    this.resetState(counter + 3);\n    setTimeout(() => {\n      this.setState({\n        ...(this.state.algoData.showList = false),\n        ...(this.state.algoData.traversalList = []),\n      });\n    }, 1000 * (counter + 5));\n  };\n\n  // Preorder function that does the preorder traversal on the tree.\n  // Uses a stack to store the strings of the node names, and uses\n  // the tree list to traverse the tree as if it was a regular tree class.\n  inOrder = () => {\n    var tree = this.state.algoData.tree;\n    var traversalList = this.state.algoData.traversalList;\n    var counter = 0;\n    var node = this.state.algoData.root;\n    var stack = [];\n\n    // Loop while the stack is not empty\n    while (\n      (node !== undefined && node.slice(0, -1) != \"\") ||\n      (stack !== undefined && stack.length !== 0)\n    ) {\n      // Reach the left most node of the curr node\n      while (node !== undefined && node.slice(0, -1) != \"\") {\n        for (let i = 0; i < tree.length; i++) {\n          if (node in tree[i]) {\n            stack.push(node);\n            if (\"left\" in tree[i][node]) {\n              node = tree[i][node][\"left\"];\n            } else {\n              node = \"\";\n            }\n            break;\n          } else if (i === tree.length - 1) {\n            node = \"\";\n            break;\n          }\n        }\n      }\n\n      // Current should be NULL by this point\n      let curr = stack.pop();\n\n      // Call the highlight handler function\n      setTimeout(() => {\n        traversalList.push(curr);\n        this.highlightHandler(curr, counter);\n      }, 1000 * (counter + 1));\n\n      // Set the traversalList of the class state\n      this.setState({\n        ...(this.state.algoData.traversalList = traversalList),\n      });\n\n      // Set node to curr\n      node = curr;\n\n      // Check if the node has a right child, if it does, set node to it, else set it to undefined\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"right\" in tree[i][node]) {\n            node = tree[i][node][\"right\"];\n          } else {\n            node = \"\";\n          }\n          break;\n        } else if (i === tree.length - 1) {\n          node = \"\";\n          break;\n        }\n      }\n\n      counter++;\n    }\n\n    // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n    this.resetState(counter + 1);\n    setTimeout(() => {\n      this.setState({\n        ...(this.state.algoData.showList = false),\n        ...(this.state.algoData.traversalList = []),\n      });\n    }, 1000 * (counter + 5));\n  };\n\n  // Preorder function that does the preorder traversal on the tree.\n  // Uses a stack to store the strings of the node names, and uses\n  // the tree list to traverse the tree as if it was a regular tree class.\n  postOrder = () => {\n    var tree = this.state.algoData.tree;\n    var traversalList = this.state.algoData.traversalList;\n    var counter = 0;\n    var node = this.state.algoData.root;\n    var stack = [];\n    var outputStack = [];\n    stack.push(node);\n\n    // Loop while the stack is not empty\n    while (stack !== undefined && stack.length !== 0) {\n      // Pop a node from the stack\n      node = stack.pop();\n      outputStack.push(node);\n\n      // Checks if the node has any left child, if so push that value to the stack\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"left\" in tree[i][node]) {\n            stack.push(tree[i][node][\"left\"]);\n          }\n          break;\n        }\n      }\n\n      // Checks if the node has any right child, if so push that value to the stack\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"right\" in tree[i][node]) {\n            stack.push(tree[i][node][\"right\"]);\n          }\n          break;\n        }\n      }\n    }\n\n    while (outputStack !== undefined && outputStack.length !== 0) {\n      let out = outputStack.pop();\n      // Call the highlight handler function\n      setTimeout(() => {\n        traversalList.push(out);\n        this.highlightHandler(out, counter);\n      }, 1000 * (counter + 1));\n\n      this.setState({\n        ...(this.state.algoData.traversalList = traversalList),\n      });\n      counter++;\n    }\n\n    // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n    this.resetState(counter + 1);\n    setTimeout(() => {\n      this.setState({\n        ...(this.state.algoData.showList = false),\n        ...(this.state.algoData.traversalList = []),\n      });\n    }, 1000 * (counter + 5));\n  };\n\n  levelOrder = () => {\n    var tree = this.state.algoData.tree;\n    var traversalList = this.state.algoData.traversalList;\n    var counter = 0;\n    var node = this.state.algoData.root;\n    var queue = [];\n    queue.push(node);\n\n    while (queue !== undefined && queue.length !== 0) {\n      node = queue.shift();\n      let curr = node;\n      console.log(node);\n\n      // Call the highlight handler function\n      setTimeout(() => {\n        traversalList.push(curr);\n        this.highlightHandler(curr, counter);\n        console.log(\"HIGHLIGHTING \", curr, \"WITH COUNTER \", counter);\n      }, 1000 * (counter + 1));\n\n      this.setState({\n        ...(this.state.algoData.traversalList = traversalList),\n      });\n\n      // Checks if the node has any left child, if so push that value to the stack\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"left\" in tree[i][node]) {\n            queue.push(tree[i][node][\"left\"]);\n          }\n          break;\n        }\n      }\n\n      // Checks if the node has any right child, if so push that value to the stack\n      for (let i = 0; i < tree.length; i++) {\n        if (node in tree[i]) {\n          if (\"right\" in tree[i][node]) {\n            queue.push(tree[i][node][\"right\"]);\n          }\n          break;\n        }\n      }\n\n      counter++;\n    }\n\n    // Resets the graph, the showList boolean, and the traversalList at the end of the algorithm.\n    this.resetState(counter + 1);\n    setTimeout(() => {\n      this.setState({\n        ...(this.state.algoData.showList = false),\n        ...(this.state.algoData.traversalList = []),\n      });\n    }, 1000 * (counter + 5));\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  };\n\n  //reset node color back to original\n  resetState = (counter) => {\n    if (counter <= 2) counter = 3;\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    // prettier-ignore\n    var listItems;\n    if (this.state.algoData.algorithm === \"preOrder\") {\n      listItems = \"Preorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"inOrder\") {\n      listItems = \"Inorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"postOrder\") {\n      listItems = \"Postorder Traversal: \";\n    } else if (this.state.algoData.algorithm === \"levelOrder\") {\n      listItems = \"Levelorder Traversal: \";\n    }\n\n    // prettier-ignore\n    this.state.algoData.traversalList.map((e, i) => (i < this.state.algoData.traversalList.length - 1 ? listItems += e + \" > \" : listItems += e));\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"linkSize\"\n                  type=\"text\"\n                  placeholder=\"Enter link size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkSizeHandler(\n                        document.getElementById(\"linkSize\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div id=\"node\" class=\"input-group mb-3 pt-3\">\n                <h5 class=\"font-weight-light h6\"> Algorithms: </h5>\n\n                <div className=\"pt-1\">\n                  <Button\n                    variant=\"outline-danger\"\n                    className=\"algoSelection\"\n                    onClick={() => (this.state.algoData.algorithm = \"preOrder\")}\n                  >\n                    <h6 class=\"font-weight-normal\">Preorder</h6>\n                  </Button>\n                </div>\n\n                <div className=\"pt-2\">\n                  <Button\n                    variant=\"outline-danger\"\n                    className=\"algoSelection\"\n                    onClick={() => (this.state.algoData.algorithm = \"inOrder\")}\n                  >\n                    <h6 class=\"font-weight-normal\">Inorder</h6>\n                  </Button>\n                </div>\n\n                <div className=\"pt-2\">\n                  <Button\n                    variant=\"outline-danger\"\n                    className=\"algoSelection\"\n                    onClick={() =>\n                      (this.state.algoData.algorithm = \"postOrder\")\n                    }\n                  >\n                    <h6 class=\"font-weight-normal\">Postorder</h6>\n                  </Button>\n                </div>\n\n                <div className=\"pt-2\">\n                  <Button\n                    variant=\"outline-danger\"\n                    className=\"algoSelection\"\n                    onClick={() =>\n                      (this.state.algoData.algorithm = \"levelOrder\")\n                    }\n                  >\n                    <h6 class=\"font-weight-normal\">Levelorder</h6>\n                  </Button>\n                </div>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()} //Should call selected algorithm\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light h6 pt-4\"> Add node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Node List\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-list-ul\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"json-data-container mt-3\">\n                <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n                  {this.state.algoData.tree.map((node, i) => {\n                    const type = node.type;\n                    const name = Object.keys(node)[0];\n                    const children = [\"left\", \"right\"];\n\n                    return (\n                      <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                        <TreeView key={type + \"|\" + i} nodeLabel=\"Children\">\n                          {children.map((child) => {\n                            if (child in node[name]) {\n                              return (\n                                <div className=\"info\">\n                                  {child.charAt(0).toUpperCase() +\n                                    child.slice(1)}\n                                  : {node[name][child]}\n                                </div>\n                              );\n                            }\n                          })}\n                        </TreeView>\n                      </TreeView>\n                    );\n                  })}\n                </TreeView>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <div\n            class=\"rightWindowHelpButton\"\n            data-tip=\"Help\"\n            data-for=\"helpButton\"\n          >\n            <HelpButton\n              mTitle=\"Tree\"\n              algoDesc=\"Click on the algorithm that you would like to use. After clicking, click on the start algorithm button and it wil lrun the chosen algorithm on the tree.\"\n              nLinkDesc=\"When adding a node, enter in the format of 'name of node to be added, name of parent to add node to, and the side where you want the node to be at (left, right)\n                         When removing a node, enter in the format of 'name of node to be remove'.\"\n              nodeList=\"Node List\"\n              nListDesc=\": Click on this button to view each node's left and right children.\"\n            />\n          </div>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <ReactTooltip\n          id=\"helpButton\"\n          place=\"right\"\n          backgroundColor=\"#2e8b57\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        {\n          // prettier-ignore\n          this.state.algoData.showList\n            ? <div className=\"listDisplay font-weight-light\"> <p class=\"traversalList\">{listItems}</p> </div>\n            : <div></div>\n        }\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}