{"ast":null,"code":"/**\n * @module utils\n * @description\n * Offers a series of generic methods for object manipulation, and other operations\n * that are common across rd3g such as error logging.\n */\n// This variable assures that recursive methods such as merge and isDeepEqual do not fall on\n// circular JSON structure evaluation.\nconst MAX_DEPTH = 20;\n/**\n * Checks whether a certain object property is from object type and is a non empty object.\n * @param  {Object} o - the object.\n * @param  {string} k - the object property.\n * @returns {boolean} returns true if o[k] is an non empty object.\n * @memberof utils\n */\n\nfunction _isPropertyNestedObject(o, k) {\n  return !!o && Object.prototype.hasOwnProperty.call(o, k) && typeof o[k] === \"object\" && o[k] !== null && !isEmptyObject(o[k]);\n}\n/**\n * Generic deep comparison between javascript simple or complex objects.\n * @param  {Object} o1 - one of the objects to be compared.\n * @param  {Object} o2 - second object to compare with first.\n * @param  {number} [_depth=0] - this parameter serves only for internal usage.\n * @returns {boolean} returns true if o1 and o2 have exactly the same content, or are exactly the same object reference.\n * @memberof utils\n */\n\n\nfunction isDeepEqual(o1, o2, _depth = 0) {\n  let diffs = [];\n\n  if (_depth === 0 && o1 === o2) {\n    return true;\n  }\n\n  if (isEmptyObject(o1) && !isEmptyObject(o2) || !isEmptyObject(o1) && isEmptyObject(o2)) {\n    return false;\n  }\n\n  const o1Keys = Object.keys(o1);\n  const o2Keys = Object.keys(o2);\n\n  if (o1Keys.length !== o2Keys.length) {\n    return false;\n  }\n\n  for (let k of o1Keys) {\n    const nestedO = _isPropertyNestedObject(o1, k) && _isPropertyNestedObject(o2, k);\n\n    if (nestedO && _depth < MAX_DEPTH) {\n      diffs.push(isDeepEqual(o1[k], o2[k], _depth + 1));\n    } else {\n      const r = isEmptyObject(o1[k]) && isEmptyObject(o2[k]) || Object.prototype.hasOwnProperty.call(o2, k) && o2[k] === o1[k];\n      diffs.push(r);\n\n      if (!r) {\n        break;\n      }\n    }\n  }\n\n  return diffs.indexOf(false) === -1;\n}\n/**\n * Checks whether or not a certain object is empty.\n * NOTE: If the passed parameter is not an object the method return false.\n * @param  {Object}  o - object whom emptiness we want to check.\n * @returns {boolean} true if the given object is n ft and object and is empty.\n * @memberof utils\n */\n\n\nfunction isEmptyObject(o) {\n  return !!o && typeof o === \"object\" && !Object.keys(o).length;\n}\n/**\n * Function to deep clone plain javascript objects.\n * @param {Object} o - the object to clone.\n * @param {Object} _clone - carries the cloned output throughout the\n * recursive calls. Parameter serves only for internal usage.\n * @param {number} _depth - this parameter serves only for internal usage.\n * @returns {Object} - the cloned object.\n * @memberof utils\n */\n\n\nfunction deepClone(o, _clone = {}, _depth = 0) {\n  const oKeys = Object.keys(o);\n\n  for (let k of oKeys) {\n    const nested = _isPropertyNestedObject(o, k);\n\n    _clone[k] = nested && _depth < MAX_DEPTH ? deepClone(o[k], {}, _depth + 1) : o[k];\n  }\n\n  return _clone;\n}\n/**\n * This function merges two objects o1 and o2, where o2 properties override existent o1 properties, and\n * if o2 doesn't posses some o1 property the fallback will be the o1 property.\n * @param  {Object} o1 - object.\n * @param  {Object} o2 - object that will override o1 properties.\n * @param  {int} [_depth=0] - the depth at which we are merging the object.\n * @returns {Object} object that is the result of merging o1 and o2, being o2 properties priority overriding\n * existent o1 properties.\n * @memberof utils\n */\n\n\nfunction merge(o1 = {}, o2 = {}, _depth = 0) {\n  let o = {};\n\n  if (Object.keys(o1 || {}).length === 0) {\n    return o2 && !isEmptyObject(o2) ? o2 : {};\n  }\n\n  for (let k of Object.keys(o1)) {\n    const nestedO = !!(o2[k] && typeof o2[k] === \"object\" && typeof o1[k] === \"object\" && _depth < MAX_DEPTH);\n\n    if (nestedO) {\n      const r = merge(o1[k], o2[k], _depth + 1);\n      o[k] = Object.prototype.hasOwnProperty.call(o1[k], \"length\") && Object.prototype.hasOwnProperty.call(o2[k], \"length\") ? Object.keys(r).map(rk => r[rk]) : r;\n    } else {\n      o[k] = Object.prototype.hasOwnProperty.call(o2, k) ? o2[k] : o1[k];\n    }\n  }\n\n  return o;\n}\n/**\n * Create new object from the inputted one only with the props passed\n * in the props list.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we want to pick from o.\n * @returns {Object} the object resultant from the picking operation.\n * @memberof utils\n */\n\n\nfunction pick(o, props = []) {\n  return props.reduce((acc, k) => {\n    if (Object.prototype.hasOwnProperty.call(o, k)) {\n      acc[k] = o[k];\n    }\n\n    return acc;\n  }, {});\n}\n/**\n * Picks all props except the ones passed in the props array.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we DON'T want to pick from o.\n * @returns {Object} the object resultant from the anti picking operation.\n * @memberof utils\n */\n\n\nfunction antiPick(o, props = []) {\n  const wanted = Object.keys(o).filter(k => !props.includes(k));\n  return pick(o, wanted);\n}\n/**\n * Helper function for customized error logging.\n * @param  {string} component - the name of the component where the error is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Error} the thrown error.\n * @memberof utils\n */\n\n\nfunction throwErr(component, msg) {\n  const error = `react-d3-graph :: ${component} :: ${msg}`;\n  throw Error(error);\n}\n/**\n * Helper function for customized warning logging.\n * @param  {string} component - the name of the component where the warning is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Warning} the thrown warning.\n * @memberof utils\n */\n\n\nfunction throwWarning(component, msg) {\n  const warning = `react-d3-graph :: ${component} :: ${msg}`;\n  console.warn(warning);\n}\n\nexport { isDeepEqual, isEmptyObject, deepClone, merge, pick, antiPick, throwErr, throwWarning };","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/Graph/utils.js"],"names":["MAX_DEPTH","_isPropertyNestedObject","o","k","Object","prototype","hasOwnProperty","call","isEmptyObject","isDeepEqual","o1","o2","_depth","diffs","o1Keys","keys","o2Keys","length","nestedO","push","r","indexOf","deepClone","_clone","oKeys","nested","merge","map","rk","pick","props","reduce","acc","antiPick","wanted","filter","includes","throwErr","component","msg","error","Error","throwWarning","warning","console","warn"],"mappings":"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","sourcesContent":["/**\n * @module utils\n * @description\n * Offers a series of generic methods for object manipulation, and other operations\n * that are common across rd3g such as error logging.\n */\n\n// This variable assures that recursive methods such as merge and isDeepEqual do not fall on\n// circular JSON structure evaluation.\nconst MAX_DEPTH = 20;\n\n/**\n * Checks whether a certain object property is from object type and is a non empty object.\n * @param  {Object} o - the object.\n * @param  {string} k - the object property.\n * @returns {boolean} returns true if o[k] is an non empty object.\n * @memberof utils\n */\nfunction _isPropertyNestedObject(o, k) {\n  return (\n    !!o &&\n    Object.prototype.hasOwnProperty.call(o, k) &&\n    typeof o[k] === \"object\" &&\n    o[k] !== null &&\n    !isEmptyObject(o[k])\n  );\n}\n\n/**\n * Generic deep comparison between javascript simple or complex objects.\n * @param  {Object} o1 - one of the objects to be compared.\n * @param  {Object} o2 - second object to compare with first.\n * @param  {number} [_depth=0] - this parameter serves only for internal usage.\n * @returns {boolean} returns true if o1 and o2 have exactly the same content, or are exactly the same object reference.\n * @memberof utils\n */\nfunction isDeepEqual(o1, o2, _depth = 0) {\n  let diffs = [];\n\n  if (_depth === 0 && o1 === o2) {\n    return true;\n  }\n\n  if (\n    (isEmptyObject(o1) && !isEmptyObject(o2)) ||\n    (!isEmptyObject(o1) && isEmptyObject(o2))\n  ) {\n    return false;\n  }\n\n  const o1Keys = Object.keys(o1);\n  const o2Keys = Object.keys(o2);\n\n  if (o1Keys.length !== o2Keys.length) {\n    return false;\n  }\n\n  for (let k of o1Keys) {\n    const nestedO =\n      _isPropertyNestedObject(o1, k) && _isPropertyNestedObject(o2, k);\n\n    if (nestedO && _depth < MAX_DEPTH) {\n      diffs.push(isDeepEqual(o1[k], o2[k], _depth + 1));\n    } else {\n      const r =\n        (isEmptyObject(o1[k]) && isEmptyObject(o2[k])) ||\n        (Object.prototype.hasOwnProperty.call(o2, k) && o2[k] === o1[k]);\n\n      diffs.push(r);\n\n      if (!r) {\n        break;\n      }\n    }\n  }\n\n  return diffs.indexOf(false) === -1;\n}\n\n/**\n * Checks whether or not a certain object is empty.\n * NOTE: If the passed parameter is not an object the method return false.\n * @param  {Object}  o - object whom emptiness we want to check.\n * @returns {boolean} true if the given object is n ft and object and is empty.\n * @memberof utils\n */\nfunction isEmptyObject(o) {\n  return !!o && typeof o === \"object\" && !Object.keys(o).length;\n}\n\n/**\n * Function to deep clone plain javascript objects.\n * @param {Object} o - the object to clone.\n * @param {Object} _clone - carries the cloned output throughout the\n * recursive calls. Parameter serves only for internal usage.\n * @param {number} _depth - this parameter serves only for internal usage.\n * @returns {Object} - the cloned object.\n * @memberof utils\n */\nfunction deepClone(o, _clone = {}, _depth = 0) {\n  const oKeys = Object.keys(o);\n\n  for (let k of oKeys) {\n    const nested = _isPropertyNestedObject(o, k);\n\n    _clone[k] =\n      nested && _depth < MAX_DEPTH ? deepClone(o[k], {}, _depth + 1) : o[k];\n  }\n\n  return _clone;\n}\n\n/**\n * This function merges two objects o1 and o2, where o2 properties override existent o1 properties, and\n * if o2 doesn't posses some o1 property the fallback will be the o1 property.\n * @param  {Object} o1 - object.\n * @param  {Object} o2 - object that will override o1 properties.\n * @param  {int} [_depth=0] - the depth at which we are merging the object.\n * @returns {Object} object that is the result of merging o1 and o2, being o2 properties priority overriding\n * existent o1 properties.\n * @memberof utils\n */\nfunction merge(o1 = {}, o2 = {}, _depth = 0) {\n  let o = {};\n\n  if (Object.keys(o1 || {}).length === 0) {\n    return o2 && !isEmptyObject(o2) ? o2 : {};\n  }\n\n  for (let k of Object.keys(o1)) {\n    const nestedO = !!(\n      o2[k] &&\n      typeof o2[k] === \"object\" &&\n      typeof o1[k] === \"object\" &&\n      _depth < MAX_DEPTH\n    );\n\n    if (nestedO) {\n      const r = merge(o1[k], o2[k], _depth + 1);\n\n      o[k] =\n        Object.prototype.hasOwnProperty.call(o1[k], \"length\") &&\n        Object.prototype.hasOwnProperty.call(o2[k], \"length\")\n          ? Object.keys(r).map(rk => r[rk])\n          : r;\n    } else {\n      o[k] = Object.prototype.hasOwnProperty.call(o2, k) ? o2[k] : o1[k];\n    }\n  }\n\n  return o;\n}\n\n/**\n * Create new object from the inputted one only with the props passed\n * in the props list.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we want to pick from o.\n * @returns {Object} the object resultant from the picking operation.\n * @memberof utils\n */\nfunction pick(o, props = []) {\n  return props.reduce((acc, k) => {\n    if (Object.prototype.hasOwnProperty.call(o, k)) {\n      acc[k] = o[k];\n    }\n\n    return acc;\n  }, {});\n}\n\n/**\n * Picks all props except the ones passed in the props array.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we DON'T want to pick from o.\n * @returns {Object} the object resultant from the anti picking operation.\n * @memberof utils\n */\nfunction antiPick(o, props = []) {\n  const wanted = Object.keys(o).filter(k => !props.includes(k));\n\n  return pick(o, wanted);\n}\n\n/**\n * Helper function for customized error logging.\n * @param  {string} component - the name of the component where the error is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Error} the thrown error.\n * @memberof utils\n */\nfunction throwErr(component, msg) {\n  const error = `react-d3-graph :: ${component} :: ${msg}`;\n\n  throw Error(error);\n}\n\n/**\n * Helper function for customized warning logging.\n * @param  {string} component - the name of the component where the warning is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Warning} the thrown warning.\n * @memberof utils\n */\nfunction throwWarning(component, msg) {\n  const warning = `react-d3-graph :: ${component} :: ${msg}`;\n\n  console.warn(warning);\n}\n\nexport {\n  isDeepEqual,\n  isEmptyObject,\n  deepClone,\n  merge,\n  pick,\n  antiPick,\n  throwErr,\n  throwWarning\n};\n"]},"metadata":{},"sourceType":"module"}