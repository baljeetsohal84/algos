{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport HelpButton from \"../../HelpButton/HelpButton\";\nimport \"./LinkedListVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.appendNode = () => {\n      //get link list tail and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode();\n      let newList = [...this.state.listOrder]; //update listOrder copy\n\n      newList.push(newNode.id); //\n\n      this.setState({\n        listOrder: newList\n      }); //find the new tail index\n\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.tail;\n      }); //create instance of the tail node\n\n      const tailNode = { ...this.state.data.nodes[tailIndex]\n      }; //assign current tail to new node\n\n      tailNode.next = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //update copy of nodes\n\n      newNodes[tailIndex] = tailNode; //update tail to point to the new tail node\n\n      listInfo.tail = newNode.nodeid; //update state of nodes and tail state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      this.setState({\n        listOrder: newList\n      }); //update link state\n\n      this.state.data.links.push({\n        source: tailNode.id,\n        target: newNode.id\n      });\n    };\n\n    this.prependNode = () => {\n      //get link list head and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode();\n      let newList = [...this.state.listOrder]; //update listOrder copy\n\n      newList.unshift(newNode.id); // update listOrder state\n\n      this.setState({\n        listOrder: newList\n      }); //find the current head node\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.head;\n      }); //create instance of the head node\n\n      const headNode = { ...this.state.data.nodes[headIndex]\n      }; //update head positioning\n\n      newNode.next = headNode.nodeid;\n      listInfo.head = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //get index of newNode and update node array\n\n      let lastIndex = newNodes.lastIndexOf();\n      newNodes[lastIndex] = newNode; //update state of nodes\n\n      const data = {\n        nodes: newNodes\n      };\n      this.setState(data); //head state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.state.data.links.push({\n        source: newNode.id,\n        target: headNode.id\n      });\n    };\n\n    this.handleMiddleConnection = update => {\n      this.forceUpdate(() => this.onClickAddLink(update));\n    };\n\n    this.updateConnection = () => {\n      console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo);\n      let removeName = this.state.removeNodeName;\n      let listInfo = this.state.listInfo;\n      let removeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === removeName;\n      });\n      let newNodes = [...this.state.data.nodes];\n      let removeNode = newNodes[removeIndex]; //update listOrder\n\n      let newListOrder = this.state.listOrder.filter(name => {\n        return name !== removeNode.id;\n      });\n      this.setState({\n        listOrder: newListOrder\n      });\n      const algoData = {\n        listOrder: newListOrder\n      };\n      this.setState({\n        algoData: algoData\n      });\n\n      if (this.state.data.nodes.length === 0) {\n        console.log(\"Remove last node\");\n        console.log(\"Length\", this.state.data.nodes.length);\n        listInfo.head = null;\n        listInfo.tail = null;\n        this.state.algoData.listOrder.pop();\n      } else if (listInfo.head === removeNode.nodeid) {\n        console.log(\"Remove Head\");\n        listInfo.head = removeNode.next;\n        removeNode.next = null;\n        newNodes[removeIndex] = removeNode;\n      } else if (listInfo.tail === removeNode.nodeid) {\n        console.log(\"Remove Tail\");\n        let newTailIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let newTailNode = newNodes[newTailIndex];\n        listInfo.tail = newTailNode.nodeid;\n        newTailNode.next = null;\n        newNodes[newTailIndex] = newTailNode;\n      } else {\n        console.log(\"Remove middle node\");\n        let prevIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let prevNode = newNodes[prevIndex];\n        prevNode.next = removeNode.next;\n        removeNode.next = null;\n        newNodes[prevIndex] = prevNode;\n        newNodes[removeIndex] = removeNode;\n        let middleIndex = this.state.data.links.findIndex(link => {\n          return link.target === removeNode.id;\n        });\n        let removeLinkIndex = this.state.data.links.findIndex(link => {\n          return link.source === removeNode.id;\n        }); //update link\n\n        let newLinks = [...this.state.data.links];\n        let modifyRemoveLink = newLinks[removeLinkIndex];\n        newLinks[middleIndex] = { ...newLinks[middleIndex],\n          target: modifyRemoveLink.target\n        };\n        let updateMiddle = newLinks[middleIndex]; //remove link\n\n        let newLink = [...this.state.data.links];\n        let updateLink = newLink.filter((node, index) => {\n          return index !== middleIndex;\n        });\n        console.log(\"updated middle\", updateLink);\n        this.setState({ ...(this.state.data.links = updateLink)\n        });\n        this.forceUpdate(() => this.onClickAddLink(updateMiddle));\n      } //remove node\n\n\n      let updateNode = newNodes.filter((node, index) => {\n        return index !== removeIndex;\n      });\n      this.setState({ ...(this.state.data.nodes = updateNode)\n      });\n      this.setState({\n        listInfo: listInfo\n      });\n      let links = [...this.state.data.links];\n      let removeLinkIndex = links.findIndex(link => {\n        return link.source === removeNode.id;\n      }); //remove link\n\n      let updateLinks = links.filter((link, index) => {\n        return index !== removeLinkIndex;\n      });\n      this.setState({ ...(this.state.data.links = updateLinks)\n      });\n    };\n\n    this.updateListColor = index => {\n      console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo); //get index of head and tail\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.head;\n      });\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.tail;\n      }); //copy of array\n\n      let newNodes = [...this.state.data.nodes]; //set all nodes to original color\n\n      newNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n      }); //update new head or tail with color\n\n      newNodes[headIndex].color = \"#0080FF\";\n      newNodes[tailIndex].color = \"#FF0800\"; //update display head and tail\n\n      let headName = newNodes[headIndex].id;\n      let tailName = newNodes[tailIndex].id; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      this.setState({\n        headName: headName,\n        tailName: tailName\n      });\n    };\n\n    this.getCount = () => {\n      let curCount = this.state.data.nodes.length + Math.floor(Math.random() * 100);\n      curCount = curCount + Math.floor(Math.random() * 100);\n      return curCount;\n    };\n\n    this.getNewNode = () => {\n      let length = this.state.data.nodes.length;\n      return this.state.data.nodes[length - 1];\n    };\n\n    this.nodePosHandler = pos => {\n      let newPos = 0;\n      let nodePos = this.state.nodePos;\n\n      if (pos === \"app\") {\n        newPos = this.state.nodePos.appAcc;\n        newPos += 1;\n        nodePos.appAcc = newPos;\n        this.setState({\n          nodePos: nodePos\n        });\n      } else {\n        newPos = this.state.nodePos.preAcc;\n        newPos += 1;\n        nodePos.preAcc = newPos;\n        this.setState({\n          nodePos: nodePos\n        });\n      }\n    };\n\n    this.onClickAppNode = () => {\n      console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.nodePosHandler(\"app\"); //create unique node id\n\n        let newid = this.getCount(); //add node id\n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2 + 120 * this.state.nodePos.appAcc,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.appendNode(); //call to update head and tail color\n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickPreNode = () => {\n      console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.preNodeName === \"\") {\n        this.setState({\n          preNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.preNodeName}`;\n        this.nodePosHandler(\"pre\"); //create unique node id\n\n        let newid = this.getCount(); //add node id\n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2 - 120 * this.state.nodePos.preAcc,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.prependNode(); //call to update head and tail color\n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n      this.setState({\n        preNodeName: \"\",\n        preNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickRemoveNode = () => {\n      console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo);\n\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes.length === 1) {\n        this.setState({\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Cannot remove last node!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        }; //remove node helper function\n\n        this.updateConnection(); //update color state\n\n        let index = this.state.listInfo;\n        this.updateListColor(index); //test\n\n        console.log(\"nodes\", this.state.data.nodes);\n        console.log(\"listInfo\", this.state.listInfo);\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = middleNode => {\n      //creat copy\n      let link = this.state.data.links;\n      link.push({\n        source: middleNode.source,\n        target: middleNode.target\n      }); //update links with copy\n\n      this.setState({\n        links: link\n      });\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._preNodeHandleChange = event => {\n      this.setState({\n        preNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        keyNode: this.state.algoData.keyNode,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addKeyNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        keyNode: event.target.value,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAppNode();\n      }\n    };\n\n    this._handlePreKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickPreNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkSizeHandler = linkSize => {\n      const config = this.state.config;\n      config.link.strokeWidth = linkSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      // don't need to check for other algorithms\n      // if (this.state.algoData.algorithm === \"search\") {\n      //let list = this.state.algoData.listOrder\n      this.linearSearch();\n      /*\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {\n      }\n      */\n    };\n\n    this.linearSearch = () => {\n      let list = [...this.state.listOrder];\n      var counter = 0;\n\n      for (let i = 0; i < this.state.listOrder.length; i++) {\n        console.log(this.state.listOrder);\n\n        if (!(this.state.algoData.keyNode in this.state.listOrder)) {\n          return;\n        } // check if keyNode string equals current node's id string\n\n\n        if (this.state.algoData.keyNode === this.state.listOrder[i]) {\n          console.log(\"found key node\");\n\n          for (let j = 0; j < 5; j++) {\n            setTimeout(() => this.foundTarget(this.state.algoData.keyNode), 1200 * counter);\n            counter++;\n          }\n\n          break;\n        }\n\n        setTimeout(() => this.highlightHandler(this.state.listOrder[i], counter), 1000 * (counter + 1));\n        counter++;\n      }\n\n      this.resetState(counter);\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.updateListColor(this.state.listInfo);\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      console.log(id); //Get index of the node\n\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      });\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      //nodeid gives each node a unique index\n      //next is our pointer\n      nodes: [{\n        id: \"Michael\",\n        nodeid: 1,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5\n      }],\n      links: [// { source: \"\", target: \"\" },\n      ]\n    }; //private info for linked list, head & tail refers to nodeid attribute of a node\n\n    const _listInfo = {\n      head: 1,\n      tail: 1\n    };\n    const _nodePos = {\n      preAcc: 0,\n      appAcc: 0\n    }; //for linear search\n\n    const listOrder = [\"Michael\"]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      staticGraph: true,\n      directed: true,\n      rederLabel: true,\n      // eslint-disable-next-line no-restricted-globals\n      height: screen.height * 0.83,\n      // eslint-disable-next-line no-restricted-globals\n      width: screen.width * 0.989,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"orange\",\n        strokeWidth: 3,\n        fontWeight: \"lighter\",\n        highlightFontWeight: \"lighter\"\n      },\n      link: {\n        highlightColor: \"gold\",\n        type: \"STRAIGHT\"\n      }\n    };\n    const neighbors = [];\n    const _algoData = {\n      startNode: _data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo: _listInfo,\n      nodePos: _nodePos,\n      headName: \"\",\n      tailName: \"\",\n      listOrder\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  //LINK LIST METHODS\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const head = {\n      color: \"#0080FF\",\n      margin: \"13px\"\n    };\n    const tail = {\n      color: \"#FF0800\",\n      margin: \"13px\"\n    };\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"listInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"font-weight-light\",\n        style: head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903\n        },\n        __self: this\n      }, `Head: ${this.state.headName}`), React.createElement(\"h5\", {\n        className: \"font-weight-light pt-1\",\n        style: tail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907\n        },\n        __self: this\n      }, `Tail: ${this.state.tailName}`))), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 923\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 924\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 937\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 948\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 949\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 963\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 964\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \" Link Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 981\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"linkSize\",\n        type: \"text\",\n        placeholder: \"Enter link size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkSizeHandler(document.getElementById(\"linkSize\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 998\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1032\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1041\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1042\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043\n        },\n        __self: this\n      }, \" Target Value \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1044\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"keyNode\",\n        type: \"text\",\n        name: \"keyNode\",\n        placeholder: \"Enter as: name\",\n        value: this.state.algoData.keyNode,\n        onChange: this._addKeyNodeHandleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045\n        },\n        __self: this\n      })), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" // start the Linear Search Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1055\n        },\n        __self: this\n      }, \"Start Linear Search\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1067\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1068\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1076\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1084\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1089\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1098\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1099\n        },\n        __self: this\n      }, \" Append node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112\n        },\n        __self: this\n      }, \" Prepend node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1113\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"preNodeName\",\n        placeholder: this.state.preNodePlaceholder,\n        value: this.state.preNodeName,\n        onChange: this._preNodeHandleChange,\n        onKeyPress: this._handlePreKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1114\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1127\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        class: \"rightWindowHelpButton\",\n        \"data-tip\": \"Help\",\n        \"data-for\": \"helpButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1140\n        },\n        __self: this\n      }, React.createElement(HelpButton, {\n        mTitle: \"Linked List\",\n        algoDesc: \"Enter the name of the node to search for in the 'Target Value' field. When you're ready to run the algorithm, click on 'Start Linear Search' to run the linear search on the linked list.\",\n        nLinkDesc: \"Enter the name of the node to append in the 'Append Node' field, once ready, click enter to add the node to the linked list. This will add the node to the end of the list. Prepending a node will add a node to the front of the list. Removing a node removes the node from the list and connects the previous node to the next node.\",\n        rButtons: \"Indicator\",\n        b1: \"Head & Tail Indicator\",\n        b1Desc: \": This box indicates the current Head and Tail node of the Linked List.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1145\n        },\n        __self: this\n      }))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1159\n        },\n        __self: this\n      }), React.createElement(ReactTooltip, {\n        id: \"helpButton\",\n        place: \"right\",\n        backgroundColor: \"#2e8b57\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1168\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx"],"names":["React","Graph","ReactTooltip","Dropdown","Form","Button","HelpButton","GraphVisualizer","Component","constructor","props","appendNode","listInfo","state","newNode","getNewNode","newList","listOrder","push","id","setState","tailIndex","data","nodes","findIndex","node","nodeid","tail","tailNode","next","newNodes","links","source","target","prependNode","unshift","headIndex","head","headNode","lastIndex","lastIndexOf","handleMiddleConnection","update","forceUpdate","onClickAddLink","updateConnection","console","log","removeName","removeNodeName","removeIndex","removeNode","newListOrder","filter","name","algoData","length","pop","newTailIndex","newTailNode","prevIndex","prevNode","middleIndex","link","removeLinkIndex","newLinks","modifyRemoveLink","updateMiddle","newLink","updateLink","index","updateNode","updateLinks","updateListColor","forEach","color","nodeColor","headName","tailName","getCount","curCount","Math","floor","random","nodePosHandler","pos","newPos","nodePos","appAcc","preAcc","onClickAppNode","addNodeName","addNodePlaceholder","newid","x","screen","width","y","onClickPreNode","preNodeName","preNodePlaceholder","onClickRemoveNode","removeNodePlaceholder","l","middleNode","onClickRemoveLink","removeLink","split","e","trim","sourceExists","targetExists","i","removeLinkPlaceholder","neighbors","_addNodeHandleChange","event","value","_preNodeHandleChange","_removeNodeHandleChange","_addLinkHandleChange","addLink","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","keyNode","algorithm","startAlgorithm","stack","_addKeyNodeHandleChange","_handleAddKeyEnter","key","_handlePreKeyEnter","_handleRemoveKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","nodeColorHandler","linkSizeHandler","linkSize","strokeWidth","linkColorHandler","linkColor","linearSearch","list","counter","j","setTimeout","foundTarget","highlightHandler","resetState","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","strokeColor","then","nodeIndex","origNode","nodeHighlightBehavior","automaticRearrangeAfterDropNode","staticGraph","directed","rederLabel","height","highlightStrokeColor","fontWeight","highlightFontWeight","highlightColor","type","queue","generatedConfig","nodeIdToBeRemoved","addLinkPlaceholder","render","margin","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport HelpButton from \"../../HelpButton/HelpButton\";\nimport \"./LinkedListVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n    // Default data used by the Graph component\n    const data = {\n      //nodeid gives each node a unique index\n      //next is our pointer\n      nodes: [\n        {\n          id: \"Michael\",\n          nodeid: 1,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5,\n        },\n      ],\n      links: [\n        // { source: \"\", target: \"\" },\n      ],\n    };\n    //private info for linked list, head & tail refers to nodeid attribute of a node\n    const listInfo = {\n      head: 1,\n      tail: 1,\n    };\n\n    const nodePos = {\n      preAcc: 0,\n      appAcc: 0,\n    };\n    //for linear search\n    const listOrder = [\"Michael\"];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      staticGraph: true,\n      directed: true,\n      rederLabel: true,\n      // eslint-disable-next-line no-restricted-globals\n      height: screen.height * 0.83,\n      // eslint-disable-next-line no-restricted-globals\n      width: screen.width * 0.989,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"orange\",\n        strokeWidth: 3,\n        fontWeight: \"lighter\",\n        highlightFontWeight: \"lighter\",\n      },\n      link: {\n        highlightColor: \"gold\",\n        type: \"STRAIGHT\",\n      },\n    };\n\n    const neighbors = [];\n\n    const algoData = {\n      startNode: data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo,\n      nodePos,\n      headName: \"\",\n      tailName: \"\",\n      listOrder,\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  //LINK LIST METHODS\n\n  appendNode = () => {\n    //get link list tail and the newest added node\n    let listInfo = this.state.listInfo;\n    let newNode = this.getNewNode();\n    let newList = [...this.state.listOrder];\n    //update listOrder copy\n    newList.push(newNode.id);\n    //\n    this.setState({ listOrder: newList });\n\n    //find the new tail index\n    let tailIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === listInfo.tail;\n    });\n    //create instance of the tail node\n    const tailNode = {\n      ...this.state.data.nodes[tailIndex],\n    };\n    //assign current tail to new node\n    tailNode.next = newNode.nodeid;\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes];\n    //update copy of nodes\n    newNodes[tailIndex] = tailNode;\n    //update tail to point to the new tail node\n    listInfo.tail = newNode.nodeid;\n    //update state of nodes and tail state\n    this.setState({\n      listInfo: listInfo,\n    });\n\n    this.setState({\n      ...(this.state.data.nodes = newNodes),\n    });\n\n    this.setState({ listOrder: newList });\n\n    //update link state\n    this.state.data.links.push({\n      source: tailNode.id,\n      target: newNode.id,\n    });\n  };\n\n  prependNode = () => {\n    //get link list head and the newest added node\n    let listInfo = this.state.listInfo;\n    let newNode = this.getNewNode();\n    let newList = [...this.state.listOrder];\n    //update listOrder copy\n    newList.unshift(newNode.id);\n    // update listOrder state\n    this.setState({ listOrder: newList });\n\n    //find the current head node\n    let headIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === listInfo.head;\n    });\n    //create instance of the head node\n    const headNode = {\n      ...this.state.data.nodes[headIndex],\n    };\n    //update head positioning\n    newNode.next = headNode.nodeid;\n    listInfo.head = newNode.nodeid;\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes];\n    //get index of newNode and update node array\n    let lastIndex = newNodes.lastIndexOf();\n    newNodes[lastIndex] = newNode;\n\n    //update state of nodes\n    const data = { nodes: newNodes };\n    this.setState(data);\n    //head state\n    this.setState({\n      listInfo: listInfo,\n    });\n    this.state.data.links.push({\n      source: newNode.id,\n      target: headNode.id,\n    });\n  };\n\n  //Add links between two nodes when middle is removed\n  handleMiddleConnection = (update) => {\n    this.forceUpdate(() => this.onClickAddLink(update));\n  };\n\n  //Helper function for remove node\n  updateConnection = () => {\n    console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo);\n    let removeName = this.state.removeNodeName;\n    let listInfo = this.state.listInfo;\n\n    let removeIndex = this.state.data.nodes.findIndex((node) => {\n      return node.id === removeName;\n    });\n\n    let newNodes = [...this.state.data.nodes];\n\n    let removeNode = newNodes[removeIndex];\n    //update listOrder\n    let newListOrder = this.state.listOrder.filter((name) => {\n      return name !== removeNode.id;\n    });\n    this.setState({ listOrder: newListOrder });\n\n    const algoData = { listOrder: newListOrder };\n    this.setState({ algoData: algoData });\n\n    if (this.state.data.nodes.length === 0) {\n      console.log(\"Remove last node\");\n      console.log(\"Length\", this.state.data.nodes.length);\n      listInfo.head = null;\n      listInfo.tail = null;\n      this.state.algoData.listOrder.pop();\n    } else if (listInfo.head === removeNode.nodeid) {\n      console.log(\"Remove Head\");\n      listInfo.head = removeNode.next;\n      removeNode.next = null;\n      newNodes[removeIndex] = removeNode;\n    } else if (listInfo.tail === removeNode.nodeid) {\n      console.log(\"Remove Tail\");\n      let newTailIndex = this.state.data.nodes.findIndex((node) => {\n        return node.next === removeNode.nodeid;\n      });\n\n      let newTailNode = newNodes[newTailIndex];\n\n      listInfo.tail = newTailNode.nodeid;\n      newTailNode.next = null;\n      newNodes[newTailIndex] = newTailNode;\n    } else {\n      console.log(\"Remove middle node\");\n      let prevIndex = this.state.data.nodes.findIndex((node) => {\n        return node.next === removeNode.nodeid;\n      });\n      let prevNode = newNodes[prevIndex];\n      prevNode.next = removeNode.next;\n      removeNode.next = null;\n      newNodes[prevIndex] = prevNode;\n      newNodes[removeIndex] = removeNode;\n\n      let middleIndex = this.state.data.links.findIndex((link) => {\n        return link.target === removeNode.id;\n      });\n\n      let removeLinkIndex = this.state.data.links.findIndex((link) => {\n        return link.source === removeNode.id;\n      });\n      //update link\n      let newLinks = [...this.state.data.links];\n\n      let modifyRemoveLink = newLinks[removeLinkIndex];\n\n      newLinks[middleIndex] = {\n        ...newLinks[middleIndex],\n        target: modifyRemoveLink.target,\n      };\n\n      let updateMiddle = newLinks[middleIndex];\n      //remove link\n      let newLink = [...this.state.data.links];\n\n      let updateLink = newLink.filter((node, index) => {\n        return index !== middleIndex;\n      });\n\n      console.log(\"updated middle\", updateLink);\n\n      this.setState({\n        ...(this.state.data.links = updateLink),\n      });\n\n      this.forceUpdate(() => this.onClickAddLink(updateMiddle));\n    }\n\n    //remove node\n    let updateNode = newNodes.filter((node, index) => {\n      return index !== removeIndex;\n    });\n\n    this.setState({\n      ...(this.state.data.nodes = updateNode),\n    });\n\n    this.setState({\n      listInfo: listInfo,\n    });\n\n    let links = [...this.state.data.links];\n\n    let removeLinkIndex = links.findIndex((link) => {\n      return link.source === removeNode.id;\n    });\n    //remove link\n    let updateLinks = links.filter((link, index) => {\n      return index !== removeLinkIndex;\n    });\n\n    this.setState({\n      ...(this.state.data.links = updateLinks),\n    });\n  };\n\n  //set head and tail colors\n  updateListColor = (index) => {\n    console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo);\n    //get index of head and tail\n    let headIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === index.head;\n    });\n\n    let tailIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === index.tail;\n    });\n    //copy of array\n    let newNodes = [...this.state.data.nodes];\n    //set all nodes to original color\n    newNodes.forEach((node) => {\n      node.color = this.state.nodeColor;\n    });\n    //update new head or tail with color\n    newNodes[headIndex].color = \"#0080FF\";\n    newNodes[tailIndex].color = \"#FF0800\";\n    //update display head and tail\n    let headName = newNodes[headIndex].id;\n    let tailName = newNodes[tailIndex].id;\n\n    //update state of nodes\n    this.setState({\n      ...(this.state.data.nodes = newNodes),\n    });\n\n    this.setState({\n      headName: headName,\n      tailName: tailName,\n    });\n  };\n\n  //used for assigning new nodes with a unique node id\n  getCount = () => {\n    let curCount =\n      this.state.data.nodes.length + Math.floor(Math.random() * 100);\n    curCount = curCount + Math.floor(Math.random() * 100);\n    return curCount;\n  };\n  //retrieve new node\n  getNewNode = () => {\n    let length = this.state.data.nodes.length;\n    return this.state.data.nodes[length - 1];\n  };\n\n  nodePosHandler = (pos) => {\n    let newPos = 0;\n    let nodePos = this.state.nodePos;\n    if (pos === \"app\") {\n      newPos = this.state.nodePos.appAcc;\n      newPos += 1;\n      nodePos.appAcc = newPos;\n      this.setState({\n        nodePos: nodePos,\n      });\n    } else {\n      newPos = this.state.nodePos.preAcc;\n      newPos += 1;\n      nodePos.preAcc = newPos;\n      this.setState({\n        nodePos: nodePos,\n      });\n    }\n  };\n  //appends or prepends node\n  onClickAppNode = () => {\n    console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo);\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n      this.nodePosHandler(\"app\");\n      //create unique node id\n      let newid = this.getCount();\n\n      //add node id\n      this.state.data.nodes.push({\n        id: newNode,\n        nodeid: newid,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2 + 120 * this.state.nodePos.appAcc,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5,\n      });\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.appendNode();\n\n    //call to update head and tail color\n    let index = this.state.listInfo;\n    this.updateListColor(index);\n\n    //console test -> please use for debug\n    console.log(\"nodes\", this.state.data.nodes);\n    console.log(\"listInfo\", this.state.listInfo);\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links);\n  };\n\n  onClickPreNode = () => {\n    console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo);\n    // Checks if the addNodeName is an empty string\n    if (this.state.preNodeName === \"\") {\n      this.setState({\n        preNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.preNodeName}`;\n      this.nodePosHandler(\"pre\");\n      //create unique node id\n      let newid = this.getCount();\n      //add node id\n      this.state.data.nodes.push({\n        id: newNode,\n        nodeid: newid,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2 - 120 * this.state.nodePos.preAcc,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5,\n      });\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.prependNode();\n\n    //call to update head and tail color\n    let index = this.state.listInfo;\n    this.updateListColor(index);\n\n    //console test -> please use for debug\n    console.log(\"nodes\", this.state.data.nodes);\n    console.log(\"listInfo\", this.state.listInfo);\n\n    this.setState({\n      preNodeName: \"\",\n      preNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links);\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo);\n\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes.length === 1) {\n      this.setState({\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Cannot remove last node!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      //remove node helper function\n      this.updateConnection();\n      //update color state\n      let index = this.state.listInfo;\n      this.updateListColor(index);\n\n      //test\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\",\n      });\n    }\n  };\n\n  onClickAddLink = (middleNode) => {\n    //creat copy\n    let link = this.state.data.links;\n    link.push({ source: middleNode.source, target: middleNode.target });\n    //update links with copy\n    this.setState({\n      links: link,\n    });\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            (l) => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  _preNodeHandleChange = (event) => {\n    this.setState({ preNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      keyNode: this.state.algoData.keyNode,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addKeyNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      keyNode: event.target.value,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAppNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAppNode();\n    }\n  };\n\n  _handlePreKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickPreNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkSizeHandler = (linkSize) => {\n    const config = this.state.config;\n\n    config.link.strokeWidth = linkSize;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    // don't need to check for other algorithms\n    // if (this.state.algoData.algorithm === \"search\") {\n    //let list = this.state.algoData.listOrder\n    this.linearSearch();\n    /*\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n    }\n    */\n  };\n\n  linearSearch = () => {\n    let list = [...this.state.listOrder];\n\n    var counter = 0;\n    for (let i = 0; i < this.state.listOrder.length; i++) {\n      console.log(this.state.listOrder);\n      if (!(this.state.algoData.keyNode in this.state.listOrder)) {\n        return;\n      }\n      // check if keyNode string equals current node's id string\n      if (this.state.algoData.keyNode === this.state.listOrder[i]) {\n        console.log(\"found key node\");\n        for (let j = 0; j < 5; j++) {\n          setTimeout(\n            () => this.foundTarget(this.state.algoData.keyNode),\n            1200 * counter\n          );\n          counter++;\n        }\n        break;\n      }\n      setTimeout(\n        () => this.highlightHandler(this.state.listOrder[i], counter),\n        1000 * (counter + 1)\n      );\n      counter++;\n    }\n    this.resetState(counter);\n  };\n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n      this.updateListColor(this.state.listInfo);\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    console.log(id);\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const head = { color: \"#0080FF\", margin: \"13px\" };\n    const tail = { color: \"#FF0800\", margin: \"13px\" };\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div className=\"pt-3\">\n          <div className=\"listInfo\">\n            <h5\n              className=\"font-weight-light\"\n              style={head}\n            >{`Head: ${this.state.headName}`}</h5>\n            <h5\n              className=\"font-weight-light pt-1\"\n              style={tail}\n            >{`Tail: ${this.state.tailName}`}</h5>\n          </div>\n        </div>\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"linkSize\"\n                  type=\"text\"\n                  placeholder=\"Enter link size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkSizeHandler(\n                        document.getElementById(\"linkSize\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Target Value </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"keyNode\"\n                    type=\"text\"\n                    name=\"keyNode\"\n                    placeholder=\"Enter as: name\"\n                    value={this.state.algoData.keyNode}\n                    onChange={this._addKeyNodeHandleChange}\n                  />\n                </div>\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" // start the Linear Search Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()}\n                >\n                  Start Linear Search\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light h6 pt-3\"> Append node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Prepend node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"preNodeName\"\n                  placeholder={this.state.preNodePlaceholder}\n                  value={this.state.preNodeName}\n                  onChange={this._preNodeHandleChange}\n                  onKeyPress={this._handlePreKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <div\n            class=\"rightWindowHelpButton\"\n            data-tip=\"Help\"\n            data-for=\"helpButton\"\n          >\n            <HelpButton\n              mTitle=\"Linked List\"\n              algoDesc=\"Enter the name of the node to search for in the 'Target Value' field. When you're ready to run the algorithm,\n                        click on 'Start Linear Search' to run the linear search on the linked list.\"\n              nLinkDesc=\"Enter the name of the node to append in the 'Append Node' field, once ready, click enter to add the node to the linked list.\n                         This will add the node to the end of the list. Prepending a node will add a node to the front of the list. Removing a node\n                         removes the node from the list and connects the previous node to the next node.\"\n              rButtons=\"Indicator\"\n              b1=\"Head & Tail Indicator\"\n              b1Desc=\": This box indicates the current Head and Tail node of the Linked List.\"\n            />\n          </div>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <ReactTooltip\n          id=\"helpButton\"\n          place=\"right\"\n          backgroundColor=\"#2e8b57\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}