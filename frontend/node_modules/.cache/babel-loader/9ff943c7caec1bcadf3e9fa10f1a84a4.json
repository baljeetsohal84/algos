{"ast":null,"code":"var _jsxFileName = \"/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/TreeVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./TreeVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the removeNode function\n  // addNodeName: a string used by the addNode function to set the new node name\n  // removeNodeName: a string used by the removeNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.addNode = () => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        var data = this.state.data;\n        let newNode, parent, side;\n        [newNode, parent, side] = this.state.addNodeName.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        }); // Do some error checking\n        // prettier-ignore\n\n        if (newNode === \"\" || parent === \"\" || side === \"\" || side !== \"l\" && side !== \"r\" && side !== \"L\" && side !== \"R\") {\n          this.setState({\n            addNodeName: \"\"\n          });\n          return;\n        }\n\n        var tree = this.state.algoData.tree;\n\n        for (let i = 0; i < data.nodes.length; i++) {\n          if (parent === data.nodes[i].id) {\n            // Determines if node is to be places on the left or right side of the parent node\n            // Then calculate the position by using a formula.\n            if ((side === \"l\" || side === \"L\") && !data.nodes[i].left) {\n              let x = data.nodes[i].level === 0 ? data.nodes[i].x * (0.468 + (data.nodes[i].level + 1) * 0.05) : data.nodes[i].isRightRight ? data.nodes[i].x * (0.82 + (data.nodes[i].level + 1) * 0.04) : data.nodes[i].isRight ? data.nodes[i].x * (0.77 + (data.nodes[i].level + 1) * 0.04) : data.nodes[i].x * (0.44 + (data.nodes[i].level + 1) * 0.04);\n              let y = data.nodes[i].y * 1.5;\n              data.nodes.push({\n                id: newNode,\n                level: data.nodes[i].level + 1,\n                x: x,\n                y: y,\n                isRight: data.nodes[i].isRight,\n                isRightRight: data.nodes[i].isRightRight\n              });\n              data.nodes[i].left = true; // Used to determine if parent already exists in tree list\n\n              let exists = false; // Put new node in tree list\n\n              for (let i = 0; i < tree.length; i++) {\n                if (parent in tree[i]) {\n                  tree[i][parent][\"left\"] = newNode;\n                  exists = true;\n                }\n              }\n\n              if (!exists) {\n                let newParent = {};\n                newParent[parent] = {\n                  left: newNode\n                };\n                tree.push(newParent);\n              }\n            } else if ((side === \"r\" || side === \"R\") && !data.nodes[i].right) {\n              let x = data.nodes[i].level === 0 ? data.nodes[i].x * (1.47 + (data.nodes[i].level + 1) * 0.05) : data.nodes[i].isRightRight ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04) : data.nodes[i].isRight ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04) : data.nodes[i].x * (1.6 - (data.nodes[i].level + 1) * 0.04);\n              let y = data.nodes[i].y * 1.5;\n              let isRightRight = data.nodes[i].level === 1 && data.nodes[i].isRight ? true : data.nodes[i].isRightRight ? true : false;\n              data.nodes.push({\n                id: newNode,\n                level: data.nodes[i].level + 1,\n                x: x,\n                y: y,\n                isRight: true,\n                isRightRight: isRightRight\n              });\n              data.nodes[i].right = true; // Used to determine if parent already exists in tree list\n\n              let exists = false; // Put new node in tree list\n\n              for (let i = 0; i < tree.length; i++) {\n                if (parent in tree[i]) {\n                  tree[i][parent][\"right\"] = newNode;\n                  exists = true;\n                }\n              }\n\n              if (!exists) {\n                let newParent = {};\n                newParent[parent] = {\n                  right: newNode\n                };\n                tree.push(newParent);\n              }\n            } // Form link between parent and node\n\n\n            data.links.push({\n              source: parent,\n              target: newNode\n            });\n            console.log(tree);\n            var algoData = this.state.algoData;\n            algoData.tree = tree; // Set state data into the current data object we have\n\n            this.setState({\n              data: data,\n              algoData: algoData\n            });\n            break;\n          }\n        }\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n      /*\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n       // Adds node to the neighbor array in the state's algoData\n      let found = false;\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        if (this.state.addNodeName in undirected_neighbors[i]) {\n          found = true;\n        }\n        if (this.state.addNodeName in directed_neighbors[i]) {\n          found = true;\n        }\n      }\n       if (!found) {\n        var name = this.state.addNodeName;\n        let undirected_neighbors = this.state.algoData.undirected_neighbors;\n        let directed_neighbors = this.state.algoData.directed_neighbors;\n        var newNeighbor = {};\n        newNeighbor[name] = [];\n         undirected_neighbors.push(newNeighbor);\n        directed_neighbors.push(newNeighbor);\n         this.setState({\n          undirected_neighbors: undirected_neighbors,\n          directed_neighbors: directed_neighbors,\n        });\n         console.log(\n          \"Added to UNDIRECTED_NEIGHBORS: \",\n          this.state.algoData.undirected_neighbors\n        );\n        console.log(\n          \"Added to DIRECTED NEIGHBORS: \",\n          this.state.algoData.directed_neighbors\n        );\n      }\n      */\n\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter as: name\"\n      });\n    };\n\n    this.removeNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes.length === 1) {\n        this.setState({\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Cannot remove last node!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        let neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (this.state.removeNodeName in neighbors[i]) {\n            let undirected_neighbors = this.state.algoData.undirected_neighbors;\n            let directed_neighbors = this.state.algoData.directed_neighbors; // First, remove any instances of the node in any of the nodes' neighbors\n\n            for (let i = 0; i < undirected_neighbors.length; i++) {\n              let key = Object.keys(undirected_neighbors[i])[0];\n              undirected_neighbors[i][key].filter(l => l[0] !== this.state.removeNodeName);\n\n              if (key === this.state.removeNodeName) {\n                undirected_neighbors.splice(i, 1);\n              }\n            } // Do the same for the directed_neighbors list\n\n\n            for (let i = 0; i < directed_neighbors.length; i++) {\n              let key = Object.keys(directed_neighbors[i])[0];\n              directed_neighbors[i][key].filter(l => l[0] !== this.state.removeNodeName);\n\n              if (key === this.state.removeNodeName) {\n                directed_neighbors.splice(i, 1);\n              }\n            } // Put the lists back into the state\n\n\n            this.setState({\n              undirected_neighbors: undirected_neighbors,\n              directed_neighbors: directed_neighbors\n            });\n          }\n        }\n\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter as: name\"\n        });\n      }\n    };\n\n    this.addLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target, weight;\n        [source, target, weight] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        weight = parseInt(weight);\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists || !weight) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target, weight\"\n            });\n            return;\n          }\n        } // Push to the links list in the data state\n\n\n        this.state.data.links.push({\n          source: source,\n          target: target,\n          label: weight\n        });\n        var found_in_undirected = false;\n        var found_in_directed = false;\n        var target_weight = [target, weight];\n        var source_weight = [source, weight];\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          let already_exists = false; // Add both source and target to each other's neighbors list because the graph is undirected\n\n          if (source in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_undirected = true;\n          }\n\n          already_exists = false;\n\n          if (target in undirected_neighbors[i]) {\n            for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n              if (source === undirected_neighbors[i][target][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              undirected_neighbors[i][target].push(source_weight);\n            }\n\n            found_in_undirected = true;\n          }\n        } // Push to neighbors list if a node already\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          let already_exists = false; // Add only the target node to the source neighbors list because it is a directed graph\n\n          if (source in directed_neighbors[i]) {\n            for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n              if (target === undirected_neighbors[i][source][j][0]) {\n                already_exists = true;\n              }\n            }\n\n            if (!already_exists) {\n              directed_neighbors[i][source].push(target_weight);\n            }\n\n            found_in_directed = true;\n          }\n        } // Else push a new list containing this new node as a neighbor\n\n\n        if (!found_in_undirected) {\n          let sourceNeighbor = {};\n          let targetNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          targetNeighbor[source] = source_weight;\n          undirected_neighbors.push(sourceNeighbor);\n          undirected_neighbors.push(targetNeighbor);\n        }\n\n        if (!found_in_directed) {\n          let sourceNeighbor = {};\n          sourceNeighbor[target] = target_weight;\n          directed_neighbors.push(sourceNeighbor);\n        }\n\n        var algoData = this.state.algoData;\n        algoData.undirected_neighbors = undirected_neighbors;\n        algoData.directed_neighbors = directed_neighbors;\n        this.setState({\n          algoData: algoData\n        });\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\"\n        });\n      }\n    };\n\n    this.removeLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n        var undirected_neighbors = this.state.algoData.undirected_neighbors;\n        var directed_neighbors = this.state.algoData.directed_neighbors; // Remove links for both the source and target in the undirected neighbors list\n\n        for (let i = 0; i < undirected_neighbors.length; i++) {\n          if (source in undirected_neighbors[i]) {\n            undirected_neighbors[i][source].filter(l => l[0] !== target);\n          }\n\n          if (target in undirected_neighbors[i]) {\n            undirected_neighbors[i][target].filter(l => l[0] !== source);\n          }\n        } // Remove links for the directed neighbors list\n\n\n        for (let i = 0; i < directed_neighbors.length; i++) {\n          if (source in directed_neighbors[i]) {\n            directed_neighbors[i][source].filter(l => l[0] !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        endNode: this.state.algoData.endNode,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addEndNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        endNode: event.target.value,\n        undirected_neighbors: this.state.algoData.undirected_neighbors,\n        directed_neighbors: this.state.algoData.directed_neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.addNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.removeNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.addLink();\n      }\n    };\n\n    this._handleremoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.removeLink();\n      }\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkSizeHandler = linkSize => {\n      const config = this.state.config;\n      config.link.strokeWidth = linkSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"dfs\") {\n        this.depthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {\n        this.dijkstraAlgorithm();\n      }\n    };\n\n    this.depthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false; // Uses the appropriate neighbors list if directed is turned on or not\n\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors; // Does a loop through the undirect and directed neighbors list to make sure both are valid nodes\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (startNode in neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        } // Checks whether both the start node and end node are valid\n\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = this.state.data.algoData;\n            algoData.stack = [];\n            this.setState({\n              algoData\n            });\n          } // Intiailizes the variables needed for depth-first search\n\n\n          this.state.algoData.stack = [];\n          this.state.algoData.stack.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.stack !== undefined || this.state.algoData.stack.length !== 0) {\n            const curr = this.state.algoData.stack.pop();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++; // For looping through the neighbors array\n\n            for (let i = 0; i < neighbors.length; i++) {\n              if (curr in neighbors[i] && neighbors[i][curr] !== null && neighbors[i][curr].length !== 0) {\n                // For looping through the array within the neighbors array, this contains the name and weight of the link\n                for (let j = 0; j < neighbors[i][curr].length; j++) {\n                  const newNode = neighbors[i][curr][j][0];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.stack.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n      }\n    };\n\n    this.breadthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false; // Uses the appropriate neighbors list if directed is turned on or not\n\n        var neighbors = this.state.config.directed ? this.state.algoData.directed_neighbors : this.state.algoData.undirected_neighbors;\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (startNode in neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = {\n              startNode: this.state.algoData.stack,\n              endNode: this.state.algoData.endNode,\n              undirected_neighbors: this.state.algoData.undirected_neighbors,\n              directed_neighbors: this.state.algoData.directed_neighbors,\n              algorithm: this.state.algoData.algorithm,\n              startAlgorithm: this.state.algoData.startAlgorithm,\n              stack: []\n            };\n            this.setState({\n              algoData\n            });\n          } // Initializes all the variables needed for the breadth-first search\n\n\n          this.state.algoData.queue = [];\n          this.state.algoData.queue.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.queue !== undefined || this.state.algoData.queue.length !== 0) {\n            const curr = this.state.algoData.queue.shift();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++;\n\n            for (let i = 0; i < neighbors.length; i++) {\n              if (curr in neighbors[i] && neighbors[i][curr] !== null && neighbors[i][curr].length !== 0) {\n                for (let j = 0; j < neighbors[i][curr].length; j++) {\n                  const newNode = neighbors[i][curr][j][0];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.queue.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        //store newNode updates at the proper index of the copy\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      nodes: [// default data\n      {\n        id: \"Harry\",\n        color: \"\",\n        strokeColor: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.height / 10,\n        level: 0,\n        left: false,\n        right: false,\n        isRight: false,\n        isRightRight: false\n      }],\n      links: []\n    };\n    const _tree = [{\n      Harry: {}\n    }]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      directed: true,\n      staticGraph: true,\n      //staticGraphWithDragAndDrop: true,\n      //disableLinkForce: true,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 600,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        fontSize: 13,\n        renderLabel: false\n      }\n    };\n    const _algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      tree: _tree,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name, parent, L / R\",\n      removeNodePlaceholder: \"Enter as: name\",\n      key: \"\" //state for Algorithm tabs\n\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the add///NodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map(item => {\n      return React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1014\n        },\n        __self: this\n      }, item);\n    });\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1019\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tLog fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1020\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"list-group list-group-flush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1021\n        },\n        __self: this\n      }, neighborItems)), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1025\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1026\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1033\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1042\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1047\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1056\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1057\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1058\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1059\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1074\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090\n        },\n        __self: this\n      }, \" Link Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1091\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"linkSize\",\n        type: \"text\",\n        placeholder: \"Enter link size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkSizeHandler(document.getElementById(\"linkSize\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1092\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1106\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1107\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1142\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3 pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter as: name\",\n        onChange: this._addEndNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1155\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        className: \"dropdown pt-2\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1167\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1171\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        onSelect: () => this.state.algoData.algorithm = \"dfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1172\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        evenyKey: \"2\",\n        onSelect: () => this.state.algoData.algorithm = \"bfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1178\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        onSelect: () => this.state.algoData.algorithm = \"djk\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm() //Should call selected algorithm\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1193\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1205\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1213\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1214\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1222\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1227\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1236\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1237\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1238\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1239\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1250\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1251\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"linkInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1252\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1265\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Node List\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1266\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1273\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-list-ul\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1274\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1282\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1291\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"json-data-container mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1292\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1293\n        },\n        __self: this\n      }, this.state.algoData.tree.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n        var neighbors = this.state.algoData.tree;\n\n        for (i = 0; i < neighbors.length; i++) {\n          if (name in neighbors[i]) {\n            return React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1303\n              },\n              __self: this\n            }, React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: \"children: \",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1304\n              },\n              __self: this\n            }, Object.keys(neighbors[i][name]).map((side, child) => {\n              return React.createElement(\"div\", {\n                className: \"info\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1311\n                },\n                __self: this\n              }, \" \", side, \" : \", child, \" \");\n            })));\n          }\n        }\n      })))))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1330\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1339\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/baljeetsingh/Desktop/software/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/TreeVisualizer.jsx"],"names":["React","Graph","TreeView","ReactTooltip","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","addNode","state","addNodeName","setState","addNodePlaceholder","data","nodes","length","newNode","parent","side","split","filter","e","trim","tree","algoData","i","id","left","x","level","isRightRight","isRight","y","push","exists","newParent","right","links","source","target","console","log","removeNode","removeNodeName","removeNodePlaceholder","l","neighbors","config","directed","directed_neighbors","undirected_neighbors","key","Object","keys","splice","addLink","weight","parseInt","sourceExists","targetExists","addLinkPlaceholder","j","label","found_in_undirected","found_in_directed","target_weight","source_weight","already_exists","sourceNeighbor","targetNeighbor","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","endNode","algorithm","startAlgorithm","stack","_addEndNodeHandleChange","_handleAddKeyEnter","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleremoveLinkKeyEnter","nodeSizeHandler","size","node","nodeColorHandler","color","linkSizeHandler","linkSize","link","strokeWidth","linkColorHandler","linkColor","depthFirstSearch","breadthFirstSearch","dijkstraAlgorithm","startNodeIsValid","endNodeIsValid","visited","counter","undefined","curr","pop","setTimeout","foundTarget","resetState","highlightHandler","queue","shift","rotateHandler","forEach","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","nodeColor","strokeColor","then","nodeIndex","findIndex","origNode","screen","width","height","Harry","nodeHighlightBehavior","staticGraph","rederLabel","automaticRearrangeAfterDropNode","window","innerHeight","innerWidth","highlightStrokeColor","highlightColor","fontSize","renderLabel","generatedConfig","nodeIdToBeRemoved","render","neighborItems","map","item","document","getElementById","type","name","child","_onRightClickNode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./TreeVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the removeNode function\n  // addNodeName: a string used by the addNode function to set the new node name\n  // removeNodeName: a string used by the removeNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [\n        // default data\n        {\n          id: \"Harry\",\n          color: \"\",\n          strokeColor: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.height / 10,\n          level: 0,\n          left: false,\n          right: false,\n          isRight: false,\n          isRightRight: false,\n        },\n      ],\n      links: [],\n    };\n\n    const tree = [\n      {\n        Harry: {},\n      },\n    ];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      directed: true,\n      staticGraph: true,\n      //staticGraphWithDragAndDrop: true,\n      //disableLinkForce: true,\n      rederLabel: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 600,\n        highlightStrokeColor: \"blue\",\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        fontSize: 13,\n        renderLabel: false,\n      },\n    };\n\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      tree: tree,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter as: name, parent, L / R\",\n      removeNodePlaceholder: \"Enter as: name\",\n      key: \"\", //state for Algorithm tabs\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the add///NodeName and addNodePlaceholder.\n\n  addNode = () => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      var data = this.state.data;\n      let newNode, parent, side;\n      [newNode, parent, side] = this.state.addNodeName\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      // Do some error checking\n      // prettier-ignore\n      if (newNode === \"\" || parent === \"\" || side === \"\" || (side !== \"l\" && side !== \"r\" && side !== \"L\" && side !== \"R\")) {\n        this.setState({\n          addNodeName: \"\",\n        })\n        return;\n      }\n\n      var tree = this.state.algoData.tree;\n\n      for (let i = 0; i < data.nodes.length; i++) {\n        if (parent === data.nodes[i].id) {\n          // Determines if node is to be places on the left or right side of the parent node\n          // Then calculate the position by using a formula.\n          if ((side === \"l\" || side === \"L\") && !data.nodes[i].left) {\n            let x =\n              data.nodes[i].level === 0\n                ? data.nodes[i].x * (0.468 + (data.nodes[i].level + 1) * 0.05)\n                : data.nodes[i].isRightRight\n                ? data.nodes[i].x * (0.82 + (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].isRight\n                ? data.nodes[i].x * (0.77 + (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].x * (0.44 + (data.nodes[i].level + 1) * 0.04);\n            let y = data.nodes[i].y * 1.5;\n\n            data.nodes.push({\n              id: newNode,\n              level: data.nodes[i].level + 1,\n              x: x,\n              y: y,\n              isRight: data.nodes[i].isRight,\n              isRightRight: data.nodes[i].isRightRight,\n            });\n\n            data.nodes[i].left = true;\n\n            // Used to determine if parent already exists in tree list\n            let exists = false;\n\n            // Put new node in tree list\n            for (let i = 0; i < tree.length; i++) {\n              if (parent in tree[i]) {\n                tree[i][parent][\"left\"] = newNode;\n                exists = true;\n              }\n            }\n\n            if (!exists) {\n              let newParent = {};\n              newParent[parent] = { left: newNode };\n              tree.push(newParent);\n            }\n          } else if ((side === \"r\" || side === \"R\") && !data.nodes[i].right) {\n            let x =\n              data.nodes[i].level === 0\n                ? data.nodes[i].x * (1.47 + (data.nodes[i].level + 1) * 0.05)\n                : data.nodes[i].isRightRight\n                ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].isRight\n                ? data.nodes[i].x * (1.26 - (data.nodes[i].level + 1) * 0.04)\n                : data.nodes[i].x * (1.6 - (data.nodes[i].level + 1) * 0.04);\n            let y = data.nodes[i].y * 1.5;\n\n            let isRightRight =\n              data.nodes[i].level === 1 && data.nodes[i].isRight\n                ? true\n                : data.nodes[i].isRightRight\n                ? true\n                : false;\n\n            data.nodes.push({\n              id: newNode,\n              level: data.nodes[i].level + 1,\n              x: x,\n              y: y,\n              isRight: true,\n              isRightRight: isRightRight,\n            });\n\n            data.nodes[i].right = true;\n\n            // Used to determine if parent already exists in tree list\n            let exists = false;\n\n            // Put new node in tree list\n            for (let i = 0; i < tree.length; i++) {\n              if (parent in tree[i]) {\n                tree[i][parent][\"right\"] = newNode;\n                exists = true;\n              }\n            }\n\n            if (!exists) {\n              let newParent = {};\n              newParent[parent] = { right: newNode };\n              tree.push(newParent);\n            }\n          }\n\n          // Form link between parent and node\n          data.links.push({\n            source: parent,\n            target: newNode,\n          });\n\n          console.log(tree);\n\n          var algoData = this.state.algoData;\n          algoData.tree = tree;\n\n          // Set state data into the current data object we have\n          this.setState({\n            data: data,\n            algoData: algoData,\n          });\n\n          break;\n        }\n      }\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n\n    /*\n    var undirected_neighbors = this.state.algoData.undirected_neighbors;\n    var directed_neighbors = this.state.algoData.directed_neighbors;\n\n    // Adds node to the neighbor array in the state's algoData\n    let found = false;\n    for (let i = 0; i < undirected_neighbors.length; i++) {\n      if (this.state.addNodeName in undirected_neighbors[i]) {\n        found = true;\n      }\n      if (this.state.addNodeName in directed_neighbors[i]) {\n        found = true;\n      }\n    }\n\n    if (!found) {\n      var name = this.state.addNodeName;\n      let undirected_neighbors = this.state.algoData.undirected_neighbors;\n      let directed_neighbors = this.state.algoData.directed_neighbors;\n      var newNeighbor = {};\n      newNeighbor[name] = [];\n\n      undirected_neighbors.push(newNeighbor);\n      directed_neighbors.push(newNeighbor);\n\n      this.setState({\n        undirected_neighbors: undirected_neighbors,\n        directed_neighbors: directed_neighbors,\n      });\n\n      console.log(\n        \"Added to UNDIRECTED_NEIGHBORS: \",\n        this.state.algoData.undirected_neighbors\n      );\n      console.log(\n        \"Added to DIRECTED NEIGHBORS: \",\n        this.state.algoData.directed_neighbors\n      );\n    }\n    */\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter as: name\",\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  removeNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes.length === 1) {\n      this.setState({\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Cannot remove last node!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length > 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      let neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (this.state.removeNodeName in neighbors[i]) {\n          let undirected_neighbors = this.state.algoData.undirected_neighbors;\n          let directed_neighbors = this.state.algoData.directed_neighbors;\n\n          // First, remove any instances of the node in any of the nodes' neighbors\n          for (let i = 0; i < undirected_neighbors.length; i++) {\n            let key = Object.keys(undirected_neighbors[i])[0];\n            undirected_neighbors[i][key].filter(\n              (l) => l[0] !== this.state.removeNodeName\n            );\n            if (key === this.state.removeNodeName) {\n              undirected_neighbors.splice(i, 1);\n            }\n          }\n          // Do the same for the directed_neighbors list\n          for (let i = 0; i < directed_neighbors.length; i++) {\n            let key = Object.keys(directed_neighbors[i])[0];\n            directed_neighbors[i][key].filter(\n              (l) => l[0] !== this.state.removeNodeName\n            );\n            if (key === this.state.removeNodeName) {\n              directed_neighbors.splice(i, 1);\n            }\n          }\n\n          // Put the lists back into the state\n          this.setState({\n            undirected_neighbors: undirected_neighbors,\n            directed_neighbors: directed_neighbors,\n          });\n        }\n      }\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter as: name\",\n      });\n    }\n  };\n\n  addLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target, weight;\n      [source, target, weight] = this.state.addLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      weight = parseInt(weight);\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists || !weight) {\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target, weight\",\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target, weight\",\n          });\n          return;\n        }\n      }\n\n      // Push to the links list in the data state\n      this.state.data.links.push({\n        source: source,\n        target: target,\n        label: weight,\n      });\n\n      var found_in_undirected = false;\n      var found_in_directed = false;\n      var target_weight = [target, weight];\n      var source_weight = [source, weight];\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Push to neighbors list if a node already has it as a neighbor for UNDIRECTED GRAPH\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        let already_exists = false;\n        // Add both source and target to each other's neighbors list because the graph is undirected\n        if (source in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][source].push(target_weight);\n          }\n          found_in_undirected = true;\n        }\n\n        already_exists = false;\n\n        if (target in undirected_neighbors[i]) {\n          for (let j = 0; j < undirected_neighbors[i][target].length; j++) {\n            if (source === undirected_neighbors[i][target][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            undirected_neighbors[i][target].push(source_weight);\n          }\n          found_in_undirected = true;\n        }\n      }\n\n      // Push to neighbors list if a node already\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        let already_exists = false;\n        // Add only the target node to the source neighbors list because it is a directed graph\n        if (source in directed_neighbors[i]) {\n          for (let j = 0; j < directed_neighbors[i][source].length; j++) {\n            if (target === undirected_neighbors[i][source][j][0]) {\n              already_exists = true;\n            }\n          }\n          if (!already_exists) {\n            directed_neighbors[i][source].push(target_weight);\n          }\n          found_in_directed = true;\n        }\n      }\n\n      // Else push a new list containing this new node as a neighbor\n      if (!found_in_undirected) {\n        let sourceNeighbor = {};\n        let targetNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n        targetNeighbor[source] = source_weight;\n\n        undirected_neighbors.push(sourceNeighbor);\n        undirected_neighbors.push(targetNeighbor);\n      }\n      if (!found_in_directed) {\n        let sourceNeighbor = {};\n        sourceNeighbor[target] = target_weight;\n\n        directed_neighbors.push(sourceNeighbor);\n      }\n\n      var algoData = this.state.algoData;\n      algoData.undirected_neighbors = undirected_neighbors;\n      algoData.directed_neighbors = directed_neighbors;\n\n      this.setState({\n        algoData: algoData,\n      });\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target, weight\",\n      });\n    }\n  };\n\n  removeLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      var undirected_neighbors = this.state.algoData.undirected_neighbors;\n      var directed_neighbors = this.state.algoData.directed_neighbors;\n\n      // Remove links for both the source and target in the undirected neighbors list\n      for (let i = 0; i < undirected_neighbors.length; i++) {\n        if (source in undirected_neighbors[i]) {\n          undirected_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n        if (target in undirected_neighbors[i]) {\n          undirected_neighbors[i][target].filter((l) => l[0] !== source);\n        }\n      }\n\n      // Remove links for the directed neighbors list\n      for (let i = 0; i < directed_neighbors.length; i++) {\n        if (source in directed_neighbors[i]) {\n          directed_neighbors[i][source].filter((l) => l[0] !== target);\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      endNode: this.state.algoData.endNode,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addEndNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      endNode: event.target.value,\n      undirected_neighbors: this.state.algoData.undirected_neighbors,\n      directed_neighbors: this.state.algoData.directed_neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the addNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.addNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the removeNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.removeNode();\n    }\n  };\n\n  _handleLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.addLink();\n    }\n  };\n\n  _handleremoveLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.removeLink();\n    }\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkSizeHandler = (linkSize) => {\n    const config = this.state.config;\n\n    config.link.strokeWidth = linkSize;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"dfs\") {\n      this.depthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n      this.dijkstraAlgorithm();\n    }\n  };\n\n  depthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      // Uses the appropriate neighbors list if directed is turned on or not\n      var neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      // Does a loop through the undirect and directed neighbors list to make sure both are valid nodes\n      for (let i = 0; i < neighbors.length; i++) {\n        if (startNode in neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      // Checks whether both the start node and end node are valid\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = this.state.data.algoData;\n          algoData.stack = [];\n          this.setState({ algoData });\n        }\n\n        // Intiailizes the variables needed for depth-first search\n        this.state.algoData.stack = [];\n        this.state.algoData.stack.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.stack !== undefined ||\n          this.state.algoData.stack.length !== 0\n        ) {\n          const curr = this.state.algoData.stack.pop();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          // For looping through the neighbors array\n          for (let i = 0; i < neighbors.length; i++) {\n            if (\n              curr in neighbors[i] &&\n              neighbors[i][curr] !== null &&\n              neighbors[i][curr].length !== 0\n            ) {\n              // For looping through the array within the neighbors array, this contains the name and weight of the link\n              for (let j = 0; j < neighbors[i][curr].length; j++) {\n                const newNode = neighbors[i][curr][j][0];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.stack.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n    }\n  };\n\n  breadthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      // Uses the appropriate neighbors list if directed is turned on or not\n      var neighbors = this.state.config.directed\n        ? this.state.algoData.directed_neighbors\n        : this.state.algoData.undirected_neighbors;\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (startNode in neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = {\n            startNode: this.state.algoData.stack,\n            endNode: this.state.algoData.endNode,\n            undirected_neighbors: this.state.algoData.undirected_neighbors,\n            directed_neighbors: this.state.algoData.directed_neighbors,\n            algorithm: this.state.algoData.algorithm,\n            startAlgorithm: this.state.algoData.startAlgorithm,\n            stack: [],\n          };\n          this.setState({ algoData });\n        }\n\n        // Initializes all the variables needed for the breadth-first search\n        this.state.algoData.queue = [];\n        this.state.algoData.queue.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.queue !== undefined ||\n          this.state.algoData.queue.length !== 0\n        ) {\n          const curr = this.state.algoData.queue.shift();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          for (let i = 0; i < neighbors.length; i++) {\n            if (\n              curr in neighbors[i] &&\n              neighbors[i][curr] !== null &&\n              neighbors[i][curr].length !== 0\n            ) {\n              for (let j = 0; j < neighbors[i][curr].length; j++) {\n                const newNode = neighbors[i][curr][j][0];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.queue.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  };\n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map((item) => {\n      return <li class=\"list-group-item\">{item}</li>;\n    });\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"tLog fixed-bottom\">\n          <ul class=\"list-group list-group-flush\">{neighborItems}</ul>\n        </div>\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"linkSize\"\n                  type=\"text\"\n                  placeholder=\"Enter link size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkSizeHandler(\n                        document.getElementById(\"linkSize\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div id=\"node\" class=\"input-group mb-3 pt-2\">\n                <h5 class=\"font-weight-light h6\"> Target Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"tNode\"\n                    type=\"text\"\n                    name=\"tarhetNode\"\n                    placeholder=\"Enter as: name\"\n                    onChange={this._addEndNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <Dropdown className=\"dropdown pt-2\" drop=\"right\">\n                  <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-two\">\n                    Algorithm\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu id=\"algoSelection\">\n                    <Dropdown.Item\n                      eventKey=\"1\"\n                      onSelect={() => (this.state.algoData.algorithm = \"dfs\")}\n                    >\n                      Depth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      evenyKey=\"2\"\n                      onSelect={() => (this.state.algoData.algorithm = \"bfs\")}\n                    >\n                      Breadth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"3\"\n                      onSelect={() => (this.state.algoData.algorithm = \"djk\")}\n                    >\n                      Dijkstra's\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()} //Should call selected algorithm\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Add node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"linkInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Node List\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-list-ul\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"json-data-container mt-3\">\n                <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n                  {this.state.algoData.tree.map((node, i) => {\n                    const type = node.type;\n                    const name = node.id;\n\n                    var neighbors = this.state.algoData.tree;\n\n                    for (i = 0; i < neighbors.length; i++) {\n                      if (name in neighbors[i]) {\n                        return (\n                          <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                            <TreeView\n                              key={type + \"|\" + i}\n                              nodeLabel=\"children: \"\n                            >\n                              {Object.keys(neighbors[i][name]).map(\n                                (side, child) => {\n                                  return (\n                                    <div className=\"info\">\n                                      {\" \"}\n                                      {side} : {child}{\" \"}\n                                    </div>\n                                  );\n                                }\n                              )}\n                            </TreeView>\n                          </TreeView>\n                        );\n                      }\n                    }\n                  })}\n                </TreeView>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}